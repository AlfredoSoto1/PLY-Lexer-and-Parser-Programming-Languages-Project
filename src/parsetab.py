
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BC BO CM COMMENT DIV DOUBLE DOUBLE_TYPE ELSE EQ ID IF INT INT_TYPE MAJ MAJ_EQ MIN MINUS MIN_EQ NEWLINE NOT OR PLUS PRINT RC RO S SC SO STAR WHILE WHITESPACEprog : decl_list stmt_listdecl_list : empty\n        | decl_list decl\n    empty :decl : type var_list Sstmt_list : stmt_list stmt\n        | stmt\n    stmt : IF RO exp RC stmt\n        | ELSE stmt\n        | WHILE RO exp RC stmt\n        | assignment\n        | PRINT exp S\n        | BO stmt_list BC\n    assignment : id S\n        | id EQ exp S\n    type : INT_TYPE\n        | DOUBLE_TYPE\n    var_list : var\n        | var_list CM var\n    var : ID arrayarray : empty\n        | array SO INT SC\n    id : ID\n        | ID SO INT SC\n        | ID SO ID SC\n    exp : exp AND exp\n        | exp OR exp\n        | NOT exp\n        | exp EQ EQ exp\n        | exp MIN exp\n        | exp MAJ exp\n        | exp MAJ_EQ exp\n        | exp MIN_EQ exp\n        | exp PLUS exp\n        | exp MINUS exp\n        | exp STAR exp\n        | exp DIV exp\n        | RO exp RC\n        | exp INT\n        | exp DOUBLE\n        | id\n        | INT\n        | DOUBLE\n    '
    
_lr_action_items = {'IF':([0,2,3,4,5,6,9,11,13,18,23,31,32,35,41,57,63,64,77,81,82,],[-4,8,-2,8,-3,-7,8,-11,8,-6,-9,8,-14,-5,-12,-13,8,8,-15,-8,-10,]),'ELSE':([0,2,3,4,5,6,9,11,13,18,23,31,32,35,41,57,63,64,77,81,82,],[-4,9,-2,9,-3,-7,9,-11,9,-6,-9,9,-14,-5,-12,-13,9,9,-15,-8,-10,]),'WHILE':([0,2,3,4,5,6,9,11,13,18,23,31,32,35,41,57,63,64,77,81,82,],[-4,10,-2,10,-3,-7,10,-11,10,-6,-9,10,-14,-5,-12,-13,10,10,-15,-8,-10,]),'PRINT':([0,2,3,4,5,6,9,11,13,18,23,31,32,35,41,57,63,64,77,81,82,],[-4,12,-2,12,-3,-7,12,-11,12,-6,-9,12,-14,-5,-12,-13,12,12,-15,-8,-10,]),'BO':([0,2,3,4,5,6,9,11,13,18,23,31,32,35,41,57,63,64,77,81,82,],[-4,13,-2,13,-3,-7,13,-11,13,-6,-9,13,-14,-5,-12,-13,13,13,-15,-8,-10,]),'INT_TYPE':([0,2,3,5,35,],[-4,14,-2,-3,-5,]),'DOUBLE_TYPE':([0,2,3,5,35,],[-4,15,-2,-3,-5,]),'ID':([0,2,3,4,5,6,7,9,11,12,13,14,15,18,22,23,24,26,27,31,32,33,34,35,36,41,42,43,45,46,47,48,49,50,51,52,57,63,64,67,77,81,82,],[-4,17,-2,17,-3,-7,21,17,-11,17,17,-16,-17,-6,17,-9,17,17,17,17,-14,17,59,-5,21,-12,17,17,17,17,17,17,17,17,17,17,-13,17,17,17,-15,-8,-10,]),'$end':([1,4,6,11,18,23,32,41,57,77,81,82,],[0,-1,-7,-11,-6,-9,-14,-12,-13,-15,-8,-10,]),'BC':([6,11,18,23,31,32,41,57,77,81,82,],[-7,-11,-6,-9,57,-14,-12,-13,-15,-8,-10,]),'RO':([8,10,12,22,24,26,27,33,42,43,45,46,47,48,49,50,51,52,67,],[22,24,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'NOT':([12,22,24,26,27,33,42,43,45,46,47,48,49,50,51,52,67,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'INT':([12,17,22,24,25,26,27,28,29,30,33,34,39,40,42,43,45,46,47,48,49,50,51,52,53,54,55,56,58,62,65,66,67,68,69,70,71,72,73,74,75,76,78,79,83,],[28,-23,28,28,53,28,28,-42,-43,-41,28,60,53,53,28,28,28,28,28,28,28,28,28,28,-39,-40,53,53,53,80,53,53,28,53,53,53,53,53,53,53,53,-38,-25,-24,53,]),'DOUBLE':([12,17,22,24,25,26,27,28,29,30,33,39,40,42,43,45,46,47,48,49,50,51,52,53,54,55,56,58,65,66,67,68,69,70,71,72,73,74,75,76,78,79,83,],[29,-23,29,29,54,29,29,-42,-43,-41,29,54,54,29,29,29,29,29,29,29,29,29,29,-39,-40,54,54,54,54,54,29,54,54,54,54,54,54,54,54,-38,-25,-24,54,]),'S':([16,17,19,20,21,25,28,29,30,37,38,53,54,55,58,61,65,66,68,69,70,71,72,73,74,75,76,78,79,83,84,],[32,-23,35,-18,-4,41,-42,-43,-41,-20,-21,-39,-40,-28,77,-19,-26,-27,-30,-31,-32,-33,-34,-35,-36,-37,-38,-25,-24,-29,-22,]),'EQ':([16,17,25,28,29,30,39,40,44,53,54,55,56,58,65,66,68,69,70,71,72,73,74,75,76,78,79,83,],[33,-23,44,-42,-43,-41,44,44,67,-39,-40,44,44,44,44,44,44,44,44,44,44,44,44,44,-38,-25,-24,44,]),'AND':([17,25,28,29,30,39,40,53,54,55,56,58,65,66,68,69,70,71,72,73,74,75,76,78,79,83,],[-23,42,-42,-43,-41,42,42,-39,-40,42,42,42,42,42,42,42,42,42,42,42,42,42,-38,-25,-24,42,]),'OR':([17,25,28,29,30,39,40,53,54,55,56,58,65,66,68,69,70,71,72,73,74,75,76,78,79,83,],[-23,43,-42,-43,-41,43,43,-39,-40,43,43,43,43,43,43,43,43,43,43,43,43,43,-38,-25,-24,43,]),'MIN':([17,25,28,29,30,39,40,53,54,55,56,58,65,66,68,69,70,71,72,73,74,75,76,78,79,83,],[-23,45,-42,-43,-41,45,45,-39,-40,45,45,45,45,45,45,45,45,45,45,45,45,45,-38,-25,-24,45,]),'MAJ':([17,25,28,29,30,39,40,53,54,55,56,58,65,66,68,69,70,71,72,73,74,75,76,78,79,83,],[-23,46,-42,-43,-41,46,46,-39,-40,46,46,46,46,46,46,46,46,46,46,46,46,46,-38,-25,-24,46,]),'MAJ_EQ':([17,25,28,29,30,39,40,53,54,55,56,58,65,66,68,69,70,71,72,73,74,75,76,78,79,83,],[-23,47,-42,-43,-41,47,47,-39,-40,47,47,47,47,47,47,47,47,47,47,47,47,47,-38,-25,-24,47,]),'MIN_EQ':([17,25,28,29,30,39,40,53,54,55,56,58,65,66,68,69,70,71,72,73,74,75,76,78,79,83,],[-23,48,-42,-43,-41,48,48,-39,-40,48,48,48,48,48,48,48,48,48,48,48,48,48,-38,-25,-24,48,]),'PLUS':([17,25,28,29,30,39,40,53,54,55,56,58,65,66,68,69,70,71,72,73,74,75,76,78,79,83,],[-23,49,-42,-43,-41,49,49,-39,-40,49,49,49,49,49,49,49,49,49,49,49,49,49,-38,-25,-24,49,]),'MINUS':([17,25,28,29,30,39,40,53,54,55,56,58,65,66,68,69,70,71,72,73,74,75,76,78,79,83,],[-23,50,-42,-43,-41,50,50,-39,-40,50,50,50,50,50,50,50,50,50,50,50,50,50,-38,-25,-24,50,]),'STAR':([17,25,28,29,30,39,40,53,54,55,56,58,65,66,68,69,70,71,72,73,74,75,76,78,79,83,],[-23,51,-42,-43,-41,51,51,-39,-40,51,51,51,51,51,51,51,51,51,51,51,51,51,-38,-25,-24,51,]),'DIV':([17,25,28,29,30,39,40,53,54,55,56,58,65,66,68,69,70,71,72,73,74,75,76,78,79,83,],[-23,52,-42,-43,-41,52,52,-39,-40,52,52,52,52,52,52,52,52,52,52,52,52,52,-38,-25,-24,52,]),'RC':([17,28,29,30,39,40,53,54,55,56,65,66,68,69,70,71,72,73,74,75,76,78,79,83,],[-23,-42,-43,-41,63,64,-39,-40,-28,76,-26,-27,-30,-31,-32,-33,-34,-35,-36,-37,-38,-25,-24,-29,]),'SO':([17,21,37,38,84,],[34,-4,62,-21,-22,]),'CM':([19,20,21,37,38,61,84,],[36,-18,-4,-20,-21,-19,-22,]),'SC':([59,60,80,],[78,79,84,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'decl_list':([0,],[2,]),'empty':([0,21,],[3,38,]),'stmt_list':([2,13,],[4,31,]),'decl':([2,],[5,]),'stmt':([2,4,9,13,31,63,64,],[6,18,23,6,18,81,82,]),'type':([2,],[7,]),'assignment':([2,4,9,13,31,63,64,],[11,11,11,11,11,11,11,]),'id':([2,4,9,12,13,22,24,26,27,31,33,42,43,45,46,47,48,49,50,51,52,63,64,67,],[16,16,16,30,16,30,30,30,30,16,30,30,30,30,30,30,30,30,30,30,30,16,16,30,]),'var_list':([7,],[19,]),'var':([7,36,],[20,61,]),'exp':([12,22,24,26,27,33,42,43,45,46,47,48,49,50,51,52,67,],[25,39,40,55,56,58,65,66,68,69,70,71,72,73,74,75,83,]),'array':([21,],[37,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> decl_list stmt_list','prog',2,'p_prog','Lexical-Asignacion.py',162),
  ('decl_list -> empty','decl_list',1,'p_decl_list','Lexical-Asignacion.py',166),
  ('decl_list -> decl_list decl','decl_list',2,'p_decl_list','Lexical-Asignacion.py',167),
  ('empty -> <empty>','empty',0,'p_empty','Lexical-Asignacion.py',172),
  ('decl -> type var_list S','decl',3,'p_decl','Lexical-Asignacion.py',176),
  ('stmt_list -> stmt_list stmt','stmt_list',2,'p_stmt_list','Lexical-Asignacion.py',180),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list','Lexical-Asignacion.py',181),
  ('stmt -> IF RO exp RC stmt','stmt',5,'p_stmt','Lexical-Asignacion.py',186),
  ('stmt -> ELSE stmt','stmt',2,'p_stmt','Lexical-Asignacion.py',187),
  ('stmt -> WHILE RO exp RC stmt','stmt',5,'p_stmt','Lexical-Asignacion.py',188),
  ('stmt -> assignment','stmt',1,'p_stmt','Lexical-Asignacion.py',189),
  ('stmt -> PRINT exp S','stmt',3,'p_stmt','Lexical-Asignacion.py',190),
  ('stmt -> BO stmt_list BC','stmt',3,'p_stmt','Lexical-Asignacion.py',191),
  ('assignment -> id S','assignment',2,'p_assignment','Lexical-Asignacion.py',196),
  ('assignment -> id EQ exp S','assignment',4,'p_assignment','Lexical-Asignacion.py',197),
  ('type -> INT_TYPE','type',1,'p_type','Lexical-Asignacion.py',202),
  ('type -> DOUBLE_TYPE','type',1,'p_type','Lexical-Asignacion.py',203),
  ('var_list -> var','var_list',1,'p_var_list','Lexical-Asignacion.py',208),
  ('var_list -> var_list CM var','var_list',3,'p_var_list','Lexical-Asignacion.py',209),
  ('var -> ID array','var',2,'p_var','Lexical-Asignacion.py',214),
  ('array -> empty','array',1,'p_array','Lexical-Asignacion.py',218),
  ('array -> array SO INT SC','array',4,'p_array','Lexical-Asignacion.py',219),
  ('id -> ID','id',1,'p_id','Lexical-Asignacion.py',224),
  ('id -> ID SO INT SC','id',4,'p_id','Lexical-Asignacion.py',225),
  ('id -> ID SO ID SC','id',4,'p_id','Lexical-Asignacion.py',226),
  ('exp -> exp AND exp','exp',3,'p_exp','Lexical-Asignacion.py',236),
  ('exp -> exp OR exp','exp',3,'p_exp','Lexical-Asignacion.py',237),
  ('exp -> NOT exp','exp',2,'p_exp','Lexical-Asignacion.py',238),
  ('exp -> exp EQ EQ exp','exp',4,'p_exp','Lexical-Asignacion.py',239),
  ('exp -> exp MIN exp','exp',3,'p_exp','Lexical-Asignacion.py',240),
  ('exp -> exp MAJ exp','exp',3,'p_exp','Lexical-Asignacion.py',241),
  ('exp -> exp MAJ_EQ exp','exp',3,'p_exp','Lexical-Asignacion.py',242),
  ('exp -> exp MIN_EQ exp','exp',3,'p_exp','Lexical-Asignacion.py',243),
  ('exp -> exp PLUS exp','exp',3,'p_exp','Lexical-Asignacion.py',244),
  ('exp -> exp MINUS exp','exp',3,'p_exp','Lexical-Asignacion.py',245),
  ('exp -> exp STAR exp','exp',3,'p_exp','Lexical-Asignacion.py',246),
  ('exp -> exp DIV exp','exp',3,'p_exp','Lexical-Asignacion.py',247),
  ('exp -> RO exp RC','exp',3,'p_exp','Lexical-Asignacion.py',248),
  ('exp -> exp INT','exp',2,'p_exp','Lexical-Asignacion.py',249),
  ('exp -> exp DOUBLE','exp',2,'p_exp','Lexical-Asignacion.py',250),
  ('exp -> id','exp',1,'p_exp','Lexical-Asignacion.py',251),
  ('exp -> INT','exp',1,'p_exp','Lexical-Asignacion.py',252),
  ('exp -> DOUBLE','exp',1,'p_exp','Lexical-Asignacion.py',253),
]
