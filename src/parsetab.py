
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocMINMAJMIN_EQMAJ_EQleftPLUSMINUSleftSTARDIVrightUMINUSnonassocRORCAND BC BO CM COMMENT DIV DOUBLE DOUBLE_TYPE ELSE EQ ID IF INT INT_TYPE MAJ MAJ_EQ MIN MINUS MIN_EQ NEWLINE NOT OR PLUS PRINT RC RO S SC SO STAR UMINUS WHILE WHITESPACEprog : decl_list stmt_listdecl_list : empty\n        | decl decl_list\n    empty :decl : type var_list Sstmt_list : stmt stmt_list\n        | stmt\n    stmt : if_stmt\n            | while_stmt\n            | block_stmt\n            | print_stmt\n            | assignment\n    if_stmt : IF RO exp RC stmt else_stmt\n    else_stmt : ELSE stmt\n            | empty\n    while_stmt : WHILE RO exp RC stmt\n    print_stmt : PRINT exp S\n    block_stmt : BO stmt_list BC\n    assignment : id EQ exp Stype : INT_TYPE\n        | DOUBLE_TYPE\n    var_list : var\n        | var CM var_list\n    var : ID arrayarray : empty\n        | SO INT SC array\n    id_array : SO INT SC id_array\n        | SO id SC id_array\n        | empty\n    id : ID\n        | ID id_array\n    exp : RO exp RC\n        | condition\n        | arigmethic\n        | number_id\n        | unumber_id\n    condition : NOT exp\n        | exp OR exp\n        | exp AND exp\n        | exp MIN exp\n        | exp MAJ exp\n        | exp EQ EQ exp\n        | exp MAJ_EQ exp\n        | exp MIN_EQ exp\n    arigmethic : exp PLUS exp\n        | exp MINUS exp\n        | exp STAR exp\n        | exp DIV exp\n    number_id : id \n        | INT\n        | DOUBLE\n    unumber_id : UMINUS\n        | exp UMINUS\n        | MINUS exp %prec UMINUS\n    '
    
_lr_action_items = {'IF':([0,2,3,4,9,10,11,12,13,14,17,21,45,52,53,74,75,88,92,93,98,99,100,101,],[-4,15,-2,-4,15,-8,-9,-10,-11,-12,15,-3,-5,-18,-17,15,15,-19,-4,-16,-13,15,-15,-14,]),'WHILE':([0,2,3,4,9,10,11,12,13,14,17,21,45,52,53,74,75,88,92,93,98,99,100,101,],[-4,16,-2,-4,16,-8,-9,-10,-11,-12,16,-3,-5,-18,-17,16,16,-19,-4,-16,-13,16,-15,-14,]),'BO':([0,2,3,4,9,10,11,12,13,14,17,21,45,52,53,74,75,88,92,93,98,99,100,101,],[-4,17,-2,-4,17,-8,-9,-10,-11,-12,17,-3,-5,-18,-17,17,17,-19,-4,-16,-13,17,-15,-14,]),'PRINT':([0,2,3,4,9,10,11,12,13,14,17,21,45,52,53,74,75,88,92,93,98,99,100,101,],[-4,18,-2,-4,18,-8,-9,-10,-11,-12,18,-3,-5,-18,-17,18,18,-19,-4,-16,-13,18,-15,-14,]),'ID':([0,2,3,4,5,6,7,9,10,11,12,13,14,17,18,21,26,27,30,35,36,41,43,45,46,52,53,54,55,56,57,59,60,61,62,63,64,74,75,80,88,92,93,98,99,100,101,],[-4,20,-2,-4,24,-20,-21,20,-8,-9,-10,-11,-12,20,20,-3,20,20,20,20,20,20,20,-5,24,-18,-17,20,20,20,20,20,20,20,20,20,20,20,20,20,-19,-4,-16,-13,20,-15,-14,]),'INT_TYPE':([0,4,45,],[6,6,-5,]),'DOUBLE_TYPE':([0,4,45,],[7,7,-5,]),'$end':([1,8,9,10,11,12,13,14,25,52,53,88,92,93,98,100,101,],[0,-1,-7,-8,-9,-10,-11,-12,-6,-18,-17,-19,-4,-16,-13,-15,-14,]),'BC':([9,10,11,12,13,14,25,28,52,53,88,92,93,98,100,101,],[-7,-8,-9,-10,-11,-12,-6,52,-18,-17,-19,-4,-16,-13,-15,-14,]),'ELSE':([10,11,12,13,14,52,53,88,92,93,98,100,101,],[-8,-9,-10,-11,-12,-18,-17,-19,99,-16,-13,-15,-14,]),'RO':([15,16,18,26,27,30,35,36,41,54,55,56,57,59,60,61,62,63,64,80,],[26,27,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'NOT':([18,26,27,30,35,36,41,54,55,56,57,59,60,61,62,63,64,80,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'INT':([18,26,27,30,35,36,41,43,49,54,55,56,57,59,60,61,62,63,64,80,],[38,38,38,38,38,38,38,70,73,38,38,38,38,38,38,38,38,38,38,38,]),'DOUBLE':([18,26,27,30,35,36,41,54,55,56,57,59,60,61,62,63,64,80,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'UMINUS':([18,20,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,50,51,54,55,56,57,59,60,61,62,63,64,65,66,67,68,69,76,77,78,79,80,81,82,83,84,85,86,87,89,90,94,95,96,],[40,-4,40,40,65,40,-33,-34,-35,-36,40,40,-49,-50,-51,-52,40,-31,-29,65,65,40,40,40,40,40,40,40,40,40,40,-53,65,65,65,65,65,65,65,65,40,65,65,65,65,65,65,-32,-4,-4,65,-27,-28,]),'MINUS':([18,20,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,50,51,54,55,56,57,59,60,61,62,63,64,65,66,67,68,69,76,77,78,79,80,81,82,83,84,85,86,87,89,90,94,95,96,],[36,-4,36,36,62,36,-33,-34,-35,-36,36,36,-49,-50,-51,-52,36,-31,-29,62,62,36,36,36,36,36,36,36,36,36,36,-53,62,62,-54,62,62,62,62,62,36,62,62,-45,-46,-47,-48,-32,-4,-4,62,-27,-28,]),'EQ':([19,20,29,31,32,33,34,37,38,39,40,42,44,50,51,58,65,66,67,68,69,76,77,78,79,81,82,83,84,85,86,87,89,90,94,95,96,],[41,-4,58,-33,-34,-35,-36,-49,-50,-51,-52,-31,-29,58,58,80,-53,58,58,-54,58,58,58,-40,-41,-43,-44,-45,-46,-47,-48,-32,-4,-4,58,-27,-28,]),'S':([20,22,23,24,29,31,32,33,34,37,38,39,40,42,44,47,48,65,67,68,69,72,76,77,78,79,81,82,83,84,85,86,87,89,90,91,94,95,96,97,],[-4,45,-22,-4,53,-33,-34,-35,-36,-49,-50,-51,-52,-31,-29,-24,-25,-53,-37,-54,88,-23,-38,-39,-40,-41,-43,-44,-45,-46,-47,-48,-32,-4,-4,-4,-42,-27,-28,-26,]),'OR':([20,29,31,32,33,34,37,38,39,40,42,44,50,51,65,66,67,68,69,76,77,78,79,81,82,83,84,85,86,87,89,90,94,95,96,],[-4,54,-33,-34,-35,-36,-49,-50,-51,-52,-31,-29,54,54,-53,54,54,-54,54,54,54,-40,-41,-43,-44,-45,-46,-47,-48,-32,-4,-4,54,-27,-28,]),'AND':([20,29,31,32,33,34,37,38,39,40,42,44,50,51,65,66,67,68,69,76,77,78,79,81,82,83,84,85,86,87,89,90,94,95,96,],[-4,55,-33,-34,-35,-36,-49,-50,-51,-52,-31,-29,55,55,-53,55,55,-54,55,55,55,-40,-41,-43,-44,-45,-46,-47,-48,-32,-4,-4,55,-27,-28,]),'MIN':([20,29,31,32,33,34,37,38,39,40,42,44,50,51,65,66,67,68,69,76,77,78,79,81,82,83,84,85,86,87,89,90,94,95,96,],[-4,56,-33,-34,-35,-36,-49,-50,-51,-52,-31,-29,56,56,-53,56,56,-54,56,56,56,None,None,None,None,-45,-46,-47,-48,-32,-4,-4,56,-27,-28,]),'MAJ':([20,29,31,32,33,34,37,38,39,40,42,44,50,51,65,66,67,68,69,76,77,78,79,81,82,83,84,85,86,87,89,90,94,95,96,],[-4,57,-33,-34,-35,-36,-49,-50,-51,-52,-31,-29,57,57,-53,57,57,-54,57,57,57,None,None,None,None,-45,-46,-47,-48,-32,-4,-4,57,-27,-28,]),'MAJ_EQ':([20,29,31,32,33,34,37,38,39,40,42,44,50,51,65,66,67,68,69,76,77,78,79,81,82,83,84,85,86,87,89,90,94,95,96,],[-4,59,-33,-34,-35,-36,-49,-50,-51,-52,-31,-29,59,59,-53,59,59,-54,59,59,59,None,None,None,None,-45,-46,-47,-48,-32,-4,-4,59,-27,-28,]),'MIN_EQ':([20,29,31,32,33,34,37,38,39,40,42,44,50,51,65,66,67,68,69,76,77,78,79,81,82,83,84,85,86,87,89,90,94,95,96,],[-4,60,-33,-34,-35,-36,-49,-50,-51,-52,-31,-29,60,60,-53,60,60,-54,60,60,60,None,None,None,None,-45,-46,-47,-48,-32,-4,-4,60,-27,-28,]),'PLUS':([20,29,31,32,33,34,37,38,39,40,42,44,50,51,65,66,67,68,69,76,77,78,79,81,82,83,84,85,86,87,89,90,94,95,96,],[-4,61,-33,-34,-35,-36,-49,-50,-51,-52,-31,-29,61,61,-53,61,61,-54,61,61,61,61,61,61,61,-45,-46,-47,-48,-32,-4,-4,61,-27,-28,]),'STAR':([20,29,31,32,33,34,37,38,39,40,42,44,50,51,65,66,67,68,69,76,77,78,79,81,82,83,84,85,86,87,89,90,94,95,96,],[-4,63,-33,-34,-35,-36,-49,-50,-51,-52,-31,-29,63,63,-53,63,63,-54,63,63,63,63,63,63,63,63,63,-47,-48,-32,-4,-4,63,-27,-28,]),'DIV':([20,29,31,32,33,34,37,38,39,40,42,44,50,51,65,66,67,68,69,76,77,78,79,81,82,83,84,85,86,87,89,90,94,95,96,],[-4,64,-33,-34,-35,-36,-49,-50,-51,-52,-31,-29,64,64,-53,64,64,-54,64,64,64,64,64,64,64,64,64,-47,-48,-32,-4,-4,64,-27,-28,]),'RC':([20,31,32,33,34,37,38,39,40,42,44,50,51,65,66,67,68,76,77,78,79,81,82,83,84,85,86,87,89,90,94,95,96,],[-4,-33,-34,-35,-36,-49,-50,-51,-52,-31,-29,74,75,-53,87,-37,-54,-38,-39,-40,-41,-43,-44,-45,-46,-47,-48,-32,-4,-4,-42,-27,-28,]),'SC':([20,42,44,70,71,73,89,90,95,96,],[-4,-31,-29,89,90,91,-4,-4,-27,-28,]),'SO':([20,24,89,90,91,],[43,49,43,43,49,]),'CM':([23,24,47,48,91,97,],[46,-4,-24,-25,-4,-26,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'decl_list':([0,4,],[2,21,]),'empty':([0,4,20,24,89,90,91,92,],[3,3,44,48,44,44,48,100,]),'decl':([0,4,],[4,4,]),'type':([0,4,],[5,5,]),'stmt_list':([2,9,17,],[8,25,28,]),'stmt':([2,9,17,74,75,99,],[9,9,9,92,93,101,]),'if_stmt':([2,9,17,74,75,99,],[10,10,10,10,10,10,]),'while_stmt':([2,9,17,74,75,99,],[11,11,11,11,11,11,]),'block_stmt':([2,9,17,74,75,99,],[12,12,12,12,12,12,]),'print_stmt':([2,9,17,74,75,99,],[13,13,13,13,13,13,]),'assignment':([2,9,17,74,75,99,],[14,14,14,14,14,14,]),'id':([2,9,17,18,26,27,30,35,36,41,43,54,55,56,57,59,60,61,62,63,64,74,75,80,99,],[19,19,19,37,37,37,37,37,37,37,71,37,37,37,37,37,37,37,37,37,37,19,19,37,19,]),'var_list':([5,46,],[22,72,]),'var':([5,46,],[23,23,]),'exp':([18,26,27,30,35,36,41,54,55,56,57,59,60,61,62,63,64,80,],[29,50,51,66,67,68,69,76,77,78,79,81,82,83,84,85,86,94,]),'condition':([18,26,27,30,35,36,41,54,55,56,57,59,60,61,62,63,64,80,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'arigmethic':([18,26,27,30,35,36,41,54,55,56,57,59,60,61,62,63,64,80,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'number_id':([18,26,27,30,35,36,41,54,55,56,57,59,60,61,62,63,64,80,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'unumber_id':([18,26,27,30,35,36,41,54,55,56,57,59,60,61,62,63,64,80,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'id_array':([20,89,90,],[42,95,96,]),'array':([24,91,],[47,97,]),'else_stmt':([92,],[98,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> decl_list stmt_list','prog',2,'p_prog','Lexical-Asignacion.py',172),
  ('decl_list -> empty','decl_list',1,'p_decl_list','Lexical-Asignacion.py',178),
  ('decl_list -> decl decl_list','decl_list',2,'p_decl_list','Lexical-Asignacion.py',179),
  ('empty -> <empty>','empty',0,'p_empty','Lexical-Asignacion.py',190),
  ('decl -> type var_list S','decl',3,'p_decl','Lexical-Asignacion.py',194),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_stmt_list','Lexical-Asignacion.py',204),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list','Lexical-Asignacion.py',205),
  ('stmt -> if_stmt','stmt',1,'p_stmt','Lexical-Asignacion.py',214),
  ('stmt -> while_stmt','stmt',1,'p_stmt','Lexical-Asignacion.py',215),
  ('stmt -> block_stmt','stmt',1,'p_stmt','Lexical-Asignacion.py',216),
  ('stmt -> print_stmt','stmt',1,'p_stmt','Lexical-Asignacion.py',217),
  ('stmt -> assignment','stmt',1,'p_stmt','Lexical-Asignacion.py',218),
  ('if_stmt -> IF RO exp RC stmt else_stmt','if_stmt',6,'p_if_stmt','Lexical-Asignacion.py',224),
  ('else_stmt -> ELSE stmt','else_stmt',2,'p_else_stmt','Lexical-Asignacion.py',232),
  ('else_stmt -> empty','else_stmt',1,'p_else_stmt','Lexical-Asignacion.py',233),
  ('while_stmt -> WHILE RO exp RC stmt','while_stmt',5,'p_while_stmt','Lexical-Asignacion.py',242),
  ('print_stmt -> PRINT exp S','print_stmt',3,'p_print_stmt','Lexical-Asignacion.py',258),
  ('block_stmt -> BO stmt_list BC','block_stmt',3,'p_block_stmt','Lexical-Asignacion.py',264),
  ('assignment -> id EQ exp S','assignment',4,'p_assignment','Lexical-Asignacion.py',270),
  ('type -> INT_TYPE','type',1,'p_type','Lexical-Asignacion.py',275),
  ('type -> DOUBLE_TYPE','type',1,'p_type','Lexical-Asignacion.py',276),
  ('var_list -> var','var_list',1,'p_var_list','Lexical-Asignacion.py',285),
  ('var_list -> var CM var_list','var_list',3,'p_var_list','Lexical-Asignacion.py',286),
  ('var -> ID array','var',2,'p_var','Lexical-Asignacion.py',295),
  ('array -> empty','array',1,'p_array','Lexical-Asignacion.py',303),
  ('array -> SO INT SC array','array',4,'p_array','Lexical-Asignacion.py',304),
  ('id_array -> SO INT SC id_array','id_array',4,'p_id_array','Lexical-Asignacion.py',318),
  ('id_array -> SO id SC id_array','id_array',4,'p_id_array','Lexical-Asignacion.py',319),
  ('id_array -> empty','id_array',1,'p_id_array','Lexical-Asignacion.py',320),
  ('id -> ID','id',1,'p_id','Lexical-Asignacion.py',334),
  ('id -> ID id_array','id',2,'p_id','Lexical-Asignacion.py',335),
  ('exp -> RO exp RC','exp',3,'p_exp','Lexical-Asignacion.py',344),
  ('exp -> condition','exp',1,'p_exp','Lexical-Asignacion.py',345),
  ('exp -> arigmethic','exp',1,'p_exp','Lexical-Asignacion.py',346),
  ('exp -> number_id','exp',1,'p_exp','Lexical-Asignacion.py',347),
  ('exp -> unumber_id','exp',1,'p_exp','Lexical-Asignacion.py',348),
  ('condition -> NOT exp','condition',2,'p_condition','Lexical-Asignacion.py',357),
  ('condition -> exp OR exp','condition',3,'p_condition','Lexical-Asignacion.py',358),
  ('condition -> exp AND exp','condition',3,'p_condition','Lexical-Asignacion.py',359),
  ('condition -> exp MIN exp','condition',3,'p_condition','Lexical-Asignacion.py',360),
  ('condition -> exp MAJ exp','condition',3,'p_condition','Lexical-Asignacion.py',361),
  ('condition -> exp EQ EQ exp','condition',4,'p_condition','Lexical-Asignacion.py',362),
  ('condition -> exp MAJ_EQ exp','condition',3,'p_condition','Lexical-Asignacion.py',363),
  ('condition -> exp MIN_EQ exp','condition',3,'p_condition','Lexical-Asignacion.py',364),
  ('arigmethic -> exp PLUS exp','arigmethic',3,'p_arigmethic','Lexical-Asignacion.py',375),
  ('arigmethic -> exp MINUS exp','arigmethic',3,'p_arigmethic','Lexical-Asignacion.py',376),
  ('arigmethic -> exp STAR exp','arigmethic',3,'p_arigmethic','Lexical-Asignacion.py',377),
  ('arigmethic -> exp DIV exp','arigmethic',3,'p_arigmethic','Lexical-Asignacion.py',378),
  ('number_id -> id','number_id',1,'p_number_id','Lexical-Asignacion.py',384),
  ('number_id -> INT','number_id',1,'p_number_id','Lexical-Asignacion.py',385),
  ('number_id -> DOUBLE','number_id',1,'p_number_id','Lexical-Asignacion.py',386),
  ('unumber_id -> UMINUS','unumber_id',1,'p_unumber_id','Lexical-Asignacion.py',392),
  ('unumber_id -> exp UMINUS','unumber_id',2,'p_unumber_id','Lexical-Asignacion.py',393),
  ('unumber_id -> MINUS exp','unumber_id',2,'p_unumber_id','Lexical-Asignacion.py',394),
]
