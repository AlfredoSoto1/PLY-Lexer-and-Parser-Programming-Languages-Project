Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    NEWLINE
    WHITESPACE

Grammar

Rule 0     S' -> prog
Rule 1     prog -> decl_list stmt_list
Rule 2     decl_list -> empty
Rule 3     decl_list -> decl decl_list
Rule 4     empty -> <empty>
Rule 5     decl -> type var_list S
Rule 6     stmt_list -> stmt stmt_list
Rule 7     stmt_list -> stmt
Rule 8     stmt -> if_stmt
Rule 9     stmt -> while_stmt
Rule 10    stmt -> block_stmt
Rule 11    stmt -> print_stmt
Rule 12    stmt -> assignment
Rule 13    if_stmt -> IF RO exp RC stmt else_stmt
Rule 14    else_stmt -> ELSE stmt
Rule 15    else_stmt -> empty
Rule 16    while_stmt -> WHILE RO exp RC stmt
Rule 17    print_stmt -> PRINT exp S
Rule 18    block_stmt -> BO stmt_list BC
Rule 19    assignment -> id EQ exp S
Rule 20    type -> INT_TYPE
Rule 21    type -> DOUBLE_TYPE
Rule 22    var_list -> var
Rule 23    var_list -> var CM var_list
Rule 24    var -> ID array
Rule 25    array -> empty
Rule 26    array -> SO INT SC array
Rule 27    id_array -> SO INT SC id_array
Rule 28    id_array -> SO id SC id_array
Rule 29    id_array -> empty
Rule 30    id -> ID
Rule 31    id -> ID id_array
Rule 32    exp -> RO exp RC
Rule 33    exp -> condition
Rule 34    exp -> arigmethic
Rule 35    exp -> number_id
Rule 36    exp -> unumber_id
Rule 37    condition -> NOT exp
Rule 38    condition -> exp OR exp
Rule 39    condition -> exp AND exp
Rule 40    condition -> exp MIN exp
Rule 41    condition -> exp MAJ exp
Rule 42    condition -> exp EQ EQ exp
Rule 43    condition -> exp MAJ_EQ exp
Rule 44    condition -> exp MIN_EQ exp
Rule 45    arigmethic -> exp PLUS exp
Rule 46    arigmethic -> exp MINUS exp
Rule 47    arigmethic -> exp STAR exp
Rule 48    arigmethic -> exp DIV exp
Rule 49    number_id -> id
Rule 50    number_id -> INT
Rule 51    number_id -> DOUBLE
Rule 52    unumber_id -> UMINUS
Rule 53    unumber_id -> exp UMINUS
Rule 54    unumber_id -> MINUS exp

Terminals, with rules where they appear

AND                  : 39
BC                   : 18
BO                   : 18
CM                   : 23
COMMENT              : 
DIV                  : 48
DOUBLE               : 51
DOUBLE_TYPE          : 21
ELSE                 : 14
EQ                   : 19 42 42
ID                   : 24 30 31
IF                   : 13
INT                  : 26 27 50
INT_TYPE             : 20
MAJ                  : 41
MAJ_EQ               : 43
MIN                  : 40
MINUS                : 46 54
MIN_EQ               : 44
NEWLINE              : 
NOT                  : 37
OR                   : 38
PLUS                 : 45
PRINT                : 17
RC                   : 13 16 32
RO                   : 13 16 32
S                    : 5 17 19
SC                   : 26 27 28
SO                   : 26 27 28
STAR                 : 47
UMINUS               : 52 53
WHILE                : 16
WHITESPACE           : 
error                : 

Nonterminals, with rules where they appear

arigmethic           : 34
array                : 24 26
assignment           : 12
block_stmt           : 10
condition            : 33
decl                 : 3
decl_list            : 1 3
else_stmt            : 13
empty                : 2 15 25 29
exp                  : 13 16 17 19 32 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 53 54
id                   : 19 28 49
id_array             : 27 28 31
if_stmt              : 8
number_id            : 35
print_stmt           : 11
prog                 : 0
stmt                 : 6 7 13 14 16
stmt_list            : 1 6 18
type                 : 5
unumber_id           : 36
var                  : 22 23
var_list             : 5 23
while_stmt           : 9

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . decl_list stmt_list
    (2) decl_list -> . empty
    (3) decl_list -> . decl decl_list
    (4) empty -> .
    (5) decl -> . type var_list S
    (20) type -> . INT_TYPE
    (21) type -> . DOUBLE_TYPE

    IF              reduce using rule 4 (empty -> .)
    WHILE           reduce using rule 4 (empty -> .)
    BO              reduce using rule 4 (empty -> .)
    PRINT           reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    INT_TYPE        shift and go to state 6
    DOUBLE_TYPE     shift and go to state 7

    prog                           shift and go to state 1
    decl_list                      shift and go to state 2
    empty                          shift and go to state 3
    decl                           shift and go to state 4
    type                           shift and go to state 5

state 1

    (0) S' -> prog .



state 2

    (1) prog -> decl_list . stmt_list
    (6) stmt_list -> . stmt stmt_list
    (7) stmt_list -> . stmt
    (8) stmt -> . if_stmt
    (9) stmt -> . while_stmt
    (10) stmt -> . block_stmt
    (11) stmt -> . print_stmt
    (12) stmt -> . assignment
    (13) if_stmt -> . IF RO exp RC stmt else_stmt
    (16) while_stmt -> . WHILE RO exp RC stmt
    (18) block_stmt -> . BO stmt_list BC
    (17) print_stmt -> . PRINT exp S
    (19) assignment -> . id EQ exp S
    (30) id -> . ID
    (31) id -> . ID id_array

    IF              shift and go to state 15
    WHILE           shift and go to state 16
    BO              shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 20

    stmt_list                      shift and go to state 8
    stmt                           shift and go to state 9
    if_stmt                        shift and go to state 10
    while_stmt                     shift and go to state 11
    block_stmt                     shift and go to state 12
    print_stmt                     shift and go to state 13
    assignment                     shift and go to state 14
    id                             shift and go to state 19

state 3

    (2) decl_list -> empty .

    IF              reduce using rule 2 (decl_list -> empty .)
    WHILE           reduce using rule 2 (decl_list -> empty .)
    BO              reduce using rule 2 (decl_list -> empty .)
    PRINT           reduce using rule 2 (decl_list -> empty .)
    ID              reduce using rule 2 (decl_list -> empty .)


state 4

    (3) decl_list -> decl . decl_list
    (2) decl_list -> . empty
    (3) decl_list -> . decl decl_list
    (4) empty -> .
    (5) decl -> . type var_list S
    (20) type -> . INT_TYPE
    (21) type -> . DOUBLE_TYPE

    IF              reduce using rule 4 (empty -> .)
    WHILE           reduce using rule 4 (empty -> .)
    BO              reduce using rule 4 (empty -> .)
    PRINT           reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    INT_TYPE        shift and go to state 6
    DOUBLE_TYPE     shift and go to state 7

    decl                           shift and go to state 4
    decl_list                      shift and go to state 21
    empty                          shift and go to state 3
    type                           shift and go to state 5

state 5

    (5) decl -> type . var_list S
    (22) var_list -> . var
    (23) var_list -> . var CM var_list
    (24) var -> . ID array

    ID              shift and go to state 24

    var_list                       shift and go to state 22
    var                            shift and go to state 23

state 6

    (20) type -> INT_TYPE .

    ID              reduce using rule 20 (type -> INT_TYPE .)


state 7

    (21) type -> DOUBLE_TYPE .

    ID              reduce using rule 21 (type -> DOUBLE_TYPE .)


state 8

    (1) prog -> decl_list stmt_list .

    $end            reduce using rule 1 (prog -> decl_list stmt_list .)


state 9

    (6) stmt_list -> stmt . stmt_list
    (7) stmt_list -> stmt .
    (6) stmt_list -> . stmt stmt_list
    (7) stmt_list -> . stmt
    (8) stmt -> . if_stmt
    (9) stmt -> . while_stmt
    (10) stmt -> . block_stmt
    (11) stmt -> . print_stmt
    (12) stmt -> . assignment
    (13) if_stmt -> . IF RO exp RC stmt else_stmt
    (16) while_stmt -> . WHILE RO exp RC stmt
    (18) block_stmt -> . BO stmt_list BC
    (17) print_stmt -> . PRINT exp S
    (19) assignment -> . id EQ exp S
    (30) id -> . ID
    (31) id -> . ID id_array

    $end            reduce using rule 7 (stmt_list -> stmt .)
    BC              reduce using rule 7 (stmt_list -> stmt .)
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    BO              shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 20

    stmt                           shift and go to state 9
    stmt_list                      shift and go to state 25
    if_stmt                        shift and go to state 10
    while_stmt                     shift and go to state 11
    block_stmt                     shift and go to state 12
    print_stmt                     shift and go to state 13
    assignment                     shift and go to state 14
    id                             shift and go to state 19

state 10

    (8) stmt -> if_stmt .

    IF              reduce using rule 8 (stmt -> if_stmt .)
    WHILE           reduce using rule 8 (stmt -> if_stmt .)
    BO              reduce using rule 8 (stmt -> if_stmt .)
    PRINT           reduce using rule 8 (stmt -> if_stmt .)
    ID              reduce using rule 8 (stmt -> if_stmt .)
    $end            reduce using rule 8 (stmt -> if_stmt .)
    BC              reduce using rule 8 (stmt -> if_stmt .)
    ELSE            reduce using rule 8 (stmt -> if_stmt .)


state 11

    (9) stmt -> while_stmt .

    IF              reduce using rule 9 (stmt -> while_stmt .)
    WHILE           reduce using rule 9 (stmt -> while_stmt .)
    BO              reduce using rule 9 (stmt -> while_stmt .)
    PRINT           reduce using rule 9 (stmt -> while_stmt .)
    ID              reduce using rule 9 (stmt -> while_stmt .)
    $end            reduce using rule 9 (stmt -> while_stmt .)
    BC              reduce using rule 9 (stmt -> while_stmt .)
    ELSE            reduce using rule 9 (stmt -> while_stmt .)


state 12

    (10) stmt -> block_stmt .

    IF              reduce using rule 10 (stmt -> block_stmt .)
    WHILE           reduce using rule 10 (stmt -> block_stmt .)
    BO              reduce using rule 10 (stmt -> block_stmt .)
    PRINT           reduce using rule 10 (stmt -> block_stmt .)
    ID              reduce using rule 10 (stmt -> block_stmt .)
    $end            reduce using rule 10 (stmt -> block_stmt .)
    BC              reduce using rule 10 (stmt -> block_stmt .)
    ELSE            reduce using rule 10 (stmt -> block_stmt .)


state 13

    (11) stmt -> print_stmt .

    IF              reduce using rule 11 (stmt -> print_stmt .)
    WHILE           reduce using rule 11 (stmt -> print_stmt .)
    BO              reduce using rule 11 (stmt -> print_stmt .)
    PRINT           reduce using rule 11 (stmt -> print_stmt .)
    ID              reduce using rule 11 (stmt -> print_stmt .)
    $end            reduce using rule 11 (stmt -> print_stmt .)
    BC              reduce using rule 11 (stmt -> print_stmt .)
    ELSE            reduce using rule 11 (stmt -> print_stmt .)


state 14

    (12) stmt -> assignment .

    IF              reduce using rule 12 (stmt -> assignment .)
    WHILE           reduce using rule 12 (stmt -> assignment .)
    BO              reduce using rule 12 (stmt -> assignment .)
    PRINT           reduce using rule 12 (stmt -> assignment .)
    ID              reduce using rule 12 (stmt -> assignment .)
    $end            reduce using rule 12 (stmt -> assignment .)
    BC              reduce using rule 12 (stmt -> assignment .)
    ELSE            reduce using rule 12 (stmt -> assignment .)


state 15

    (13) if_stmt -> IF . RO exp RC stmt else_stmt

    RO              shift and go to state 26


state 16

    (16) while_stmt -> WHILE . RO exp RC stmt

    RO              shift and go to state 27


state 17

    (18) block_stmt -> BO . stmt_list BC
    (6) stmt_list -> . stmt stmt_list
    (7) stmt_list -> . stmt
    (8) stmt -> . if_stmt
    (9) stmt -> . while_stmt
    (10) stmt -> . block_stmt
    (11) stmt -> . print_stmt
    (12) stmt -> . assignment
    (13) if_stmt -> . IF RO exp RC stmt else_stmt
    (16) while_stmt -> . WHILE RO exp RC stmt
    (18) block_stmt -> . BO stmt_list BC
    (17) print_stmt -> . PRINT exp S
    (19) assignment -> . id EQ exp S
    (30) id -> . ID
    (31) id -> . ID id_array

    IF              shift and go to state 15
    WHILE           shift and go to state 16
    BO              shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 20

    stmt_list                      shift and go to state 28
    stmt                           shift and go to state 9
    if_stmt                        shift and go to state 10
    while_stmt                     shift and go to state 11
    block_stmt                     shift and go to state 12
    print_stmt                     shift and go to state 13
    assignment                     shift and go to state 14
    id                             shift and go to state 19

state 18

    (17) print_stmt -> PRINT . exp S
    (32) exp -> . RO exp RC
    (33) exp -> . condition
    (34) exp -> . arigmethic
    (35) exp -> . number_id
    (36) exp -> . unumber_id
    (37) condition -> . NOT exp
    (38) condition -> . exp OR exp
    (39) condition -> . exp AND exp
    (40) condition -> . exp MIN exp
    (41) condition -> . exp MAJ exp
    (42) condition -> . exp EQ EQ exp
    (43) condition -> . exp MAJ_EQ exp
    (44) condition -> . exp MIN_EQ exp
    (45) arigmethic -> . exp PLUS exp
    (46) arigmethic -> . exp MINUS exp
    (47) arigmethic -> . exp STAR exp
    (48) arigmethic -> . exp DIV exp
    (49) number_id -> . id
    (50) number_id -> . INT
    (51) number_id -> . DOUBLE
    (52) unumber_id -> . UMINUS
    (53) unumber_id -> . exp UMINUS
    (54) unumber_id -> . MINUS exp
    (30) id -> . ID
    (31) id -> . ID id_array

    RO              shift and go to state 30
    NOT             shift and go to state 35
    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    UMINUS          shift and go to state 40
    MINUS           shift and go to state 36
    ID              shift and go to state 20

    exp                            shift and go to state 29
    condition                      shift and go to state 31
    arigmethic                     shift and go to state 32
    number_id                      shift and go to state 33
    unumber_id                     shift and go to state 34
    id                             shift and go to state 37

state 19

    (19) assignment -> id . EQ exp S

    EQ              shift and go to state 41


state 20

    (30) id -> ID .
    (31) id -> ID . id_array
    (27) id_array -> . SO INT SC id_array
    (28) id_array -> . SO id SC id_array
    (29) id_array -> . empty
    (4) empty -> .

  ! reduce/reduce conflict for EQ resolved using rule 4 (empty -> .)
  ! reduce/reduce conflict for S resolved using rule 4 (empty -> .)
  ! reduce/reduce conflict for OR resolved using rule 4 (empty -> .)
  ! reduce/reduce conflict for AND resolved using rule 4 (empty -> .)
  ! reduce/reduce conflict for MIN resolved using rule 4 (empty -> .)
  ! reduce/reduce conflict for MAJ resolved using rule 4 (empty -> .)
  ! reduce/reduce conflict for MAJ_EQ resolved using rule 4 (empty -> .)
  ! reduce/reduce conflict for MIN_EQ resolved using rule 4 (empty -> .)
  ! reduce/reduce conflict for PLUS resolved using rule 4 (empty -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 4 (empty -> .)
  ! reduce/reduce conflict for STAR resolved using rule 4 (empty -> .)
  ! reduce/reduce conflict for DIV resolved using rule 4 (empty -> .)
  ! reduce/reduce conflict for UMINUS resolved using rule 4 (empty -> .)
  ! reduce/reduce conflict for RC resolved using rule 4 (empty -> .)
  ! reduce/reduce conflict for SC resolved using rule 4 (empty -> .)
    SO              shift and go to state 43
    EQ              reduce using rule 4 (empty -> .)
    S               reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    MIN             reduce using rule 4 (empty -> .)
    MAJ             reduce using rule 4 (empty -> .)
    MAJ_EQ          reduce using rule 4 (empty -> .)
    MIN_EQ          reduce using rule 4 (empty -> .)
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    STAR            reduce using rule 4 (empty -> .)
    DIV             reduce using rule 4 (empty -> .)
    UMINUS          reduce using rule 4 (empty -> .)
    RC              reduce using rule 4 (empty -> .)
    SC              reduce using rule 4 (empty -> .)

  ! EQ              [ reduce using rule 30 (id -> ID .) ]
  ! S               [ reduce using rule 30 (id -> ID .) ]
  ! OR              [ reduce using rule 30 (id -> ID .) ]
  ! AND             [ reduce using rule 30 (id -> ID .) ]
  ! MIN             [ reduce using rule 30 (id -> ID .) ]
  ! MAJ             [ reduce using rule 30 (id -> ID .) ]
  ! MAJ_EQ          [ reduce using rule 30 (id -> ID .) ]
  ! MIN_EQ          [ reduce using rule 30 (id -> ID .) ]
  ! PLUS            [ reduce using rule 30 (id -> ID .) ]
  ! MINUS           [ reduce using rule 30 (id -> ID .) ]
  ! STAR            [ reduce using rule 30 (id -> ID .) ]
  ! DIV             [ reduce using rule 30 (id -> ID .) ]
  ! UMINUS          [ reduce using rule 30 (id -> ID .) ]
  ! RC              [ reduce using rule 30 (id -> ID .) ]
  ! SC              [ reduce using rule 30 (id -> ID .) ]

    id_array                       shift and go to state 42
    empty                          shift and go to state 44

state 21

    (3) decl_list -> decl decl_list .

    IF              reduce using rule 3 (decl_list -> decl decl_list .)
    WHILE           reduce using rule 3 (decl_list -> decl decl_list .)
    BO              reduce using rule 3 (decl_list -> decl decl_list .)
    PRINT           reduce using rule 3 (decl_list -> decl decl_list .)
    ID              reduce using rule 3 (decl_list -> decl decl_list .)


state 22

    (5) decl -> type var_list . S

    S               shift and go to state 45


state 23

    (22) var_list -> var .
    (23) var_list -> var . CM var_list

    S               reduce using rule 22 (var_list -> var .)
    CM              shift and go to state 46


state 24

    (24) var -> ID . array
    (25) array -> . empty
    (26) array -> . SO INT SC array
    (4) empty -> .

    SO              shift and go to state 49
    CM              reduce using rule 4 (empty -> .)
    S               reduce using rule 4 (empty -> .)

    array                          shift and go to state 47
    empty                          shift and go to state 48

state 25

    (6) stmt_list -> stmt stmt_list .

    $end            reduce using rule 6 (stmt_list -> stmt stmt_list .)
    BC              reduce using rule 6 (stmt_list -> stmt stmt_list .)


state 26

    (13) if_stmt -> IF RO . exp RC stmt else_stmt
    (32) exp -> . RO exp RC
    (33) exp -> . condition
    (34) exp -> . arigmethic
    (35) exp -> . number_id
    (36) exp -> . unumber_id
    (37) condition -> . NOT exp
    (38) condition -> . exp OR exp
    (39) condition -> . exp AND exp
    (40) condition -> . exp MIN exp
    (41) condition -> . exp MAJ exp
    (42) condition -> . exp EQ EQ exp
    (43) condition -> . exp MAJ_EQ exp
    (44) condition -> . exp MIN_EQ exp
    (45) arigmethic -> . exp PLUS exp
    (46) arigmethic -> . exp MINUS exp
    (47) arigmethic -> . exp STAR exp
    (48) arigmethic -> . exp DIV exp
    (49) number_id -> . id
    (50) number_id -> . INT
    (51) number_id -> . DOUBLE
    (52) unumber_id -> . UMINUS
    (53) unumber_id -> . exp UMINUS
    (54) unumber_id -> . MINUS exp
    (30) id -> . ID
    (31) id -> . ID id_array

    RO              shift and go to state 30
    NOT             shift and go to state 35
    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    UMINUS          shift and go to state 40
    MINUS           shift and go to state 36
    ID              shift and go to state 20

    exp                            shift and go to state 50
    condition                      shift and go to state 31
    arigmethic                     shift and go to state 32
    number_id                      shift and go to state 33
    unumber_id                     shift and go to state 34
    id                             shift and go to state 37

state 27

    (16) while_stmt -> WHILE RO . exp RC stmt
    (32) exp -> . RO exp RC
    (33) exp -> . condition
    (34) exp -> . arigmethic
    (35) exp -> . number_id
    (36) exp -> . unumber_id
    (37) condition -> . NOT exp
    (38) condition -> . exp OR exp
    (39) condition -> . exp AND exp
    (40) condition -> . exp MIN exp
    (41) condition -> . exp MAJ exp
    (42) condition -> . exp EQ EQ exp
    (43) condition -> . exp MAJ_EQ exp
    (44) condition -> . exp MIN_EQ exp
    (45) arigmethic -> . exp PLUS exp
    (46) arigmethic -> . exp MINUS exp
    (47) arigmethic -> . exp STAR exp
    (48) arigmethic -> . exp DIV exp
    (49) number_id -> . id
    (50) number_id -> . INT
    (51) number_id -> . DOUBLE
    (52) unumber_id -> . UMINUS
    (53) unumber_id -> . exp UMINUS
    (54) unumber_id -> . MINUS exp
    (30) id -> . ID
    (31) id -> . ID id_array

    RO              shift and go to state 30
    NOT             shift and go to state 35
    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    UMINUS          shift and go to state 40
    MINUS           shift and go to state 36
    ID              shift and go to state 20

    exp                            shift and go to state 51
    condition                      shift and go to state 31
    arigmethic                     shift and go to state 32
    number_id                      shift and go to state 33
    unumber_id                     shift and go to state 34
    id                             shift and go to state 37

state 28

    (18) block_stmt -> BO stmt_list . BC

    BC              shift and go to state 52


state 29

    (17) print_stmt -> PRINT exp . S
    (38) condition -> exp . OR exp
    (39) condition -> exp . AND exp
    (40) condition -> exp . MIN exp
    (41) condition -> exp . MAJ exp
    (42) condition -> exp . EQ EQ exp
    (43) condition -> exp . MAJ_EQ exp
    (44) condition -> exp . MIN_EQ exp
    (45) arigmethic -> exp . PLUS exp
    (46) arigmethic -> exp . MINUS exp
    (47) arigmethic -> exp . STAR exp
    (48) arigmethic -> exp . DIV exp
    (53) unumber_id -> exp . UMINUS

    S               shift and go to state 53
    OR              shift and go to state 54
    AND             shift and go to state 55
    MIN             shift and go to state 56
    MAJ             shift and go to state 57
    EQ              shift and go to state 58
    MAJ_EQ          shift and go to state 59
    MIN_EQ          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    STAR            shift and go to state 63
    DIV             shift and go to state 64
    UMINUS          shift and go to state 65


state 30

    (32) exp -> RO . exp RC
    (32) exp -> . RO exp RC
    (33) exp -> . condition
    (34) exp -> . arigmethic
    (35) exp -> . number_id
    (36) exp -> . unumber_id
    (37) condition -> . NOT exp
    (38) condition -> . exp OR exp
    (39) condition -> . exp AND exp
    (40) condition -> . exp MIN exp
    (41) condition -> . exp MAJ exp
    (42) condition -> . exp EQ EQ exp
    (43) condition -> . exp MAJ_EQ exp
    (44) condition -> . exp MIN_EQ exp
    (45) arigmethic -> . exp PLUS exp
    (46) arigmethic -> . exp MINUS exp
    (47) arigmethic -> . exp STAR exp
    (48) arigmethic -> . exp DIV exp
    (49) number_id -> . id
    (50) number_id -> . INT
    (51) number_id -> . DOUBLE
    (52) unumber_id -> . UMINUS
    (53) unumber_id -> . exp UMINUS
    (54) unumber_id -> . MINUS exp
    (30) id -> . ID
    (31) id -> . ID id_array

    RO              shift and go to state 30
    NOT             shift and go to state 35
    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    UMINUS          shift and go to state 40
    MINUS           shift and go to state 36
    ID              shift and go to state 20

    exp                            shift and go to state 66
    condition                      shift and go to state 31
    arigmethic                     shift and go to state 32
    number_id                      shift and go to state 33
    unumber_id                     shift and go to state 34
    id                             shift and go to state 37

state 31

    (33) exp -> condition .

    S               reduce using rule 33 (exp -> condition .)
    OR              reduce using rule 33 (exp -> condition .)
    AND             reduce using rule 33 (exp -> condition .)
    MIN             reduce using rule 33 (exp -> condition .)
    MAJ             reduce using rule 33 (exp -> condition .)
    EQ              reduce using rule 33 (exp -> condition .)
    MAJ_EQ          reduce using rule 33 (exp -> condition .)
    MIN_EQ          reduce using rule 33 (exp -> condition .)
    PLUS            reduce using rule 33 (exp -> condition .)
    MINUS           reduce using rule 33 (exp -> condition .)
    STAR            reduce using rule 33 (exp -> condition .)
    DIV             reduce using rule 33 (exp -> condition .)
    UMINUS          reduce using rule 33 (exp -> condition .)
    RC              reduce using rule 33 (exp -> condition .)


state 32

    (34) exp -> arigmethic .

    S               reduce using rule 34 (exp -> arigmethic .)
    OR              reduce using rule 34 (exp -> arigmethic .)
    AND             reduce using rule 34 (exp -> arigmethic .)
    MIN             reduce using rule 34 (exp -> arigmethic .)
    MAJ             reduce using rule 34 (exp -> arigmethic .)
    EQ              reduce using rule 34 (exp -> arigmethic .)
    MAJ_EQ          reduce using rule 34 (exp -> arigmethic .)
    MIN_EQ          reduce using rule 34 (exp -> arigmethic .)
    PLUS            reduce using rule 34 (exp -> arigmethic .)
    MINUS           reduce using rule 34 (exp -> arigmethic .)
    STAR            reduce using rule 34 (exp -> arigmethic .)
    DIV             reduce using rule 34 (exp -> arigmethic .)
    UMINUS          reduce using rule 34 (exp -> arigmethic .)
    RC              reduce using rule 34 (exp -> arigmethic .)


state 33

    (35) exp -> number_id .

    S               reduce using rule 35 (exp -> number_id .)
    OR              reduce using rule 35 (exp -> number_id .)
    AND             reduce using rule 35 (exp -> number_id .)
    MIN             reduce using rule 35 (exp -> number_id .)
    MAJ             reduce using rule 35 (exp -> number_id .)
    EQ              reduce using rule 35 (exp -> number_id .)
    MAJ_EQ          reduce using rule 35 (exp -> number_id .)
    MIN_EQ          reduce using rule 35 (exp -> number_id .)
    PLUS            reduce using rule 35 (exp -> number_id .)
    MINUS           reduce using rule 35 (exp -> number_id .)
    STAR            reduce using rule 35 (exp -> number_id .)
    DIV             reduce using rule 35 (exp -> number_id .)
    UMINUS          reduce using rule 35 (exp -> number_id .)
    RC              reduce using rule 35 (exp -> number_id .)


state 34

    (36) exp -> unumber_id .

    S               reduce using rule 36 (exp -> unumber_id .)
    OR              reduce using rule 36 (exp -> unumber_id .)
    AND             reduce using rule 36 (exp -> unumber_id .)
    MIN             reduce using rule 36 (exp -> unumber_id .)
    MAJ             reduce using rule 36 (exp -> unumber_id .)
    EQ              reduce using rule 36 (exp -> unumber_id .)
    MAJ_EQ          reduce using rule 36 (exp -> unumber_id .)
    MIN_EQ          reduce using rule 36 (exp -> unumber_id .)
    PLUS            reduce using rule 36 (exp -> unumber_id .)
    MINUS           reduce using rule 36 (exp -> unumber_id .)
    STAR            reduce using rule 36 (exp -> unumber_id .)
    DIV             reduce using rule 36 (exp -> unumber_id .)
    UMINUS          reduce using rule 36 (exp -> unumber_id .)
    RC              reduce using rule 36 (exp -> unumber_id .)


state 35

    (37) condition -> NOT . exp
    (32) exp -> . RO exp RC
    (33) exp -> . condition
    (34) exp -> . arigmethic
    (35) exp -> . number_id
    (36) exp -> . unumber_id
    (37) condition -> . NOT exp
    (38) condition -> . exp OR exp
    (39) condition -> . exp AND exp
    (40) condition -> . exp MIN exp
    (41) condition -> . exp MAJ exp
    (42) condition -> . exp EQ EQ exp
    (43) condition -> . exp MAJ_EQ exp
    (44) condition -> . exp MIN_EQ exp
    (45) arigmethic -> . exp PLUS exp
    (46) arigmethic -> . exp MINUS exp
    (47) arigmethic -> . exp STAR exp
    (48) arigmethic -> . exp DIV exp
    (49) number_id -> . id
    (50) number_id -> . INT
    (51) number_id -> . DOUBLE
    (52) unumber_id -> . UMINUS
    (53) unumber_id -> . exp UMINUS
    (54) unumber_id -> . MINUS exp
    (30) id -> . ID
    (31) id -> . ID id_array

    RO              shift and go to state 30
    NOT             shift and go to state 35
    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    UMINUS          shift and go to state 40
    MINUS           shift and go to state 36
    ID              shift and go to state 20

    exp                            shift and go to state 67
    condition                      shift and go to state 31
    arigmethic                     shift and go to state 32
    number_id                      shift and go to state 33
    unumber_id                     shift and go to state 34
    id                             shift and go to state 37

state 36

    (54) unumber_id -> MINUS . exp
    (32) exp -> . RO exp RC
    (33) exp -> . condition
    (34) exp -> . arigmethic
    (35) exp -> . number_id
    (36) exp -> . unumber_id
    (37) condition -> . NOT exp
    (38) condition -> . exp OR exp
    (39) condition -> . exp AND exp
    (40) condition -> . exp MIN exp
    (41) condition -> . exp MAJ exp
    (42) condition -> . exp EQ EQ exp
    (43) condition -> . exp MAJ_EQ exp
    (44) condition -> . exp MIN_EQ exp
    (45) arigmethic -> . exp PLUS exp
    (46) arigmethic -> . exp MINUS exp
    (47) arigmethic -> . exp STAR exp
    (48) arigmethic -> . exp DIV exp
    (49) number_id -> . id
    (50) number_id -> . INT
    (51) number_id -> . DOUBLE
    (52) unumber_id -> . UMINUS
    (53) unumber_id -> . exp UMINUS
    (54) unumber_id -> . MINUS exp
    (30) id -> . ID
    (31) id -> . ID id_array

    RO              shift and go to state 30
    NOT             shift and go to state 35
    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    UMINUS          shift and go to state 40
    MINUS           shift and go to state 36
    ID              shift and go to state 20

    exp                            shift and go to state 68
    condition                      shift and go to state 31
    arigmethic                     shift and go to state 32
    number_id                      shift and go to state 33
    unumber_id                     shift and go to state 34
    id                             shift and go to state 37

state 37

    (49) number_id -> id .

    S               reduce using rule 49 (number_id -> id .)
    OR              reduce using rule 49 (number_id -> id .)
    AND             reduce using rule 49 (number_id -> id .)
    MIN             reduce using rule 49 (number_id -> id .)
    MAJ             reduce using rule 49 (number_id -> id .)
    EQ              reduce using rule 49 (number_id -> id .)
    MAJ_EQ          reduce using rule 49 (number_id -> id .)
    MIN_EQ          reduce using rule 49 (number_id -> id .)
    PLUS            reduce using rule 49 (number_id -> id .)
    MINUS           reduce using rule 49 (number_id -> id .)
    STAR            reduce using rule 49 (number_id -> id .)
    DIV             reduce using rule 49 (number_id -> id .)
    UMINUS          reduce using rule 49 (number_id -> id .)
    RC              reduce using rule 49 (number_id -> id .)


state 38

    (50) number_id -> INT .

    S               reduce using rule 50 (number_id -> INT .)
    OR              reduce using rule 50 (number_id -> INT .)
    AND             reduce using rule 50 (number_id -> INT .)
    MIN             reduce using rule 50 (number_id -> INT .)
    MAJ             reduce using rule 50 (number_id -> INT .)
    EQ              reduce using rule 50 (number_id -> INT .)
    MAJ_EQ          reduce using rule 50 (number_id -> INT .)
    MIN_EQ          reduce using rule 50 (number_id -> INT .)
    PLUS            reduce using rule 50 (number_id -> INT .)
    MINUS           reduce using rule 50 (number_id -> INT .)
    STAR            reduce using rule 50 (number_id -> INT .)
    DIV             reduce using rule 50 (number_id -> INT .)
    UMINUS          reduce using rule 50 (number_id -> INT .)
    RC              reduce using rule 50 (number_id -> INT .)


state 39

    (51) number_id -> DOUBLE .

    S               reduce using rule 51 (number_id -> DOUBLE .)
    OR              reduce using rule 51 (number_id -> DOUBLE .)
    AND             reduce using rule 51 (number_id -> DOUBLE .)
    MIN             reduce using rule 51 (number_id -> DOUBLE .)
    MAJ             reduce using rule 51 (number_id -> DOUBLE .)
    EQ              reduce using rule 51 (number_id -> DOUBLE .)
    MAJ_EQ          reduce using rule 51 (number_id -> DOUBLE .)
    MIN_EQ          reduce using rule 51 (number_id -> DOUBLE .)
    PLUS            reduce using rule 51 (number_id -> DOUBLE .)
    MINUS           reduce using rule 51 (number_id -> DOUBLE .)
    STAR            reduce using rule 51 (number_id -> DOUBLE .)
    DIV             reduce using rule 51 (number_id -> DOUBLE .)
    UMINUS          reduce using rule 51 (number_id -> DOUBLE .)
    RC              reduce using rule 51 (number_id -> DOUBLE .)


state 40

    (52) unumber_id -> UMINUS .

    S               reduce using rule 52 (unumber_id -> UMINUS .)
    OR              reduce using rule 52 (unumber_id -> UMINUS .)
    AND             reduce using rule 52 (unumber_id -> UMINUS .)
    MIN             reduce using rule 52 (unumber_id -> UMINUS .)
    MAJ             reduce using rule 52 (unumber_id -> UMINUS .)
    EQ              reduce using rule 52 (unumber_id -> UMINUS .)
    MAJ_EQ          reduce using rule 52 (unumber_id -> UMINUS .)
    MIN_EQ          reduce using rule 52 (unumber_id -> UMINUS .)
    PLUS            reduce using rule 52 (unumber_id -> UMINUS .)
    MINUS           reduce using rule 52 (unumber_id -> UMINUS .)
    STAR            reduce using rule 52 (unumber_id -> UMINUS .)
    DIV             reduce using rule 52 (unumber_id -> UMINUS .)
    UMINUS          reduce using rule 52 (unumber_id -> UMINUS .)
    RC              reduce using rule 52 (unumber_id -> UMINUS .)


state 41

    (19) assignment -> id EQ . exp S
    (32) exp -> . RO exp RC
    (33) exp -> . condition
    (34) exp -> . arigmethic
    (35) exp -> . number_id
    (36) exp -> . unumber_id
    (37) condition -> . NOT exp
    (38) condition -> . exp OR exp
    (39) condition -> . exp AND exp
    (40) condition -> . exp MIN exp
    (41) condition -> . exp MAJ exp
    (42) condition -> . exp EQ EQ exp
    (43) condition -> . exp MAJ_EQ exp
    (44) condition -> . exp MIN_EQ exp
    (45) arigmethic -> . exp PLUS exp
    (46) arigmethic -> . exp MINUS exp
    (47) arigmethic -> . exp STAR exp
    (48) arigmethic -> . exp DIV exp
    (49) number_id -> . id
    (50) number_id -> . INT
    (51) number_id -> . DOUBLE
    (52) unumber_id -> . UMINUS
    (53) unumber_id -> . exp UMINUS
    (54) unumber_id -> . MINUS exp
    (30) id -> . ID
    (31) id -> . ID id_array

    RO              shift and go to state 30
    NOT             shift and go to state 35
    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    UMINUS          shift and go to state 40
    MINUS           shift and go to state 36
    ID              shift and go to state 20

    id                             shift and go to state 37
    exp                            shift and go to state 69
    condition                      shift and go to state 31
    arigmethic                     shift and go to state 32
    number_id                      shift and go to state 33
    unumber_id                     shift and go to state 34

state 42

    (31) id -> ID id_array .

    EQ              reduce using rule 31 (id -> ID id_array .)
    S               reduce using rule 31 (id -> ID id_array .)
    OR              reduce using rule 31 (id -> ID id_array .)
    AND             reduce using rule 31 (id -> ID id_array .)
    MIN             reduce using rule 31 (id -> ID id_array .)
    MAJ             reduce using rule 31 (id -> ID id_array .)
    MAJ_EQ          reduce using rule 31 (id -> ID id_array .)
    MIN_EQ          reduce using rule 31 (id -> ID id_array .)
    PLUS            reduce using rule 31 (id -> ID id_array .)
    MINUS           reduce using rule 31 (id -> ID id_array .)
    STAR            reduce using rule 31 (id -> ID id_array .)
    DIV             reduce using rule 31 (id -> ID id_array .)
    UMINUS          reduce using rule 31 (id -> ID id_array .)
    RC              reduce using rule 31 (id -> ID id_array .)
    SC              reduce using rule 31 (id -> ID id_array .)


state 43

    (27) id_array -> SO . INT SC id_array
    (28) id_array -> SO . id SC id_array
    (30) id -> . ID
    (31) id -> . ID id_array

    INT             shift and go to state 70
    ID              shift and go to state 20

    id                             shift and go to state 71

state 44

    (29) id_array -> empty .

    EQ              reduce using rule 29 (id_array -> empty .)
    S               reduce using rule 29 (id_array -> empty .)
    OR              reduce using rule 29 (id_array -> empty .)
    AND             reduce using rule 29 (id_array -> empty .)
    MIN             reduce using rule 29 (id_array -> empty .)
    MAJ             reduce using rule 29 (id_array -> empty .)
    MAJ_EQ          reduce using rule 29 (id_array -> empty .)
    MIN_EQ          reduce using rule 29 (id_array -> empty .)
    PLUS            reduce using rule 29 (id_array -> empty .)
    MINUS           reduce using rule 29 (id_array -> empty .)
    STAR            reduce using rule 29 (id_array -> empty .)
    DIV             reduce using rule 29 (id_array -> empty .)
    UMINUS          reduce using rule 29 (id_array -> empty .)
    RC              reduce using rule 29 (id_array -> empty .)
    SC              reduce using rule 29 (id_array -> empty .)


state 45

    (5) decl -> type var_list S .

    INT_TYPE        reduce using rule 5 (decl -> type var_list S .)
    DOUBLE_TYPE     reduce using rule 5 (decl -> type var_list S .)
    IF              reduce using rule 5 (decl -> type var_list S .)
    WHILE           reduce using rule 5 (decl -> type var_list S .)
    BO              reduce using rule 5 (decl -> type var_list S .)
    PRINT           reduce using rule 5 (decl -> type var_list S .)
    ID              reduce using rule 5 (decl -> type var_list S .)


state 46

    (23) var_list -> var CM . var_list
    (22) var_list -> . var
    (23) var_list -> . var CM var_list
    (24) var -> . ID array

    ID              shift and go to state 24

    var                            shift and go to state 23
    var_list                       shift and go to state 72

state 47

    (24) var -> ID array .

    CM              reduce using rule 24 (var -> ID array .)
    S               reduce using rule 24 (var -> ID array .)


state 48

    (25) array -> empty .

    CM              reduce using rule 25 (array -> empty .)
    S               reduce using rule 25 (array -> empty .)


state 49

    (26) array -> SO . INT SC array

    INT             shift and go to state 73


state 50

    (13) if_stmt -> IF RO exp . RC stmt else_stmt
    (38) condition -> exp . OR exp
    (39) condition -> exp . AND exp
    (40) condition -> exp . MIN exp
    (41) condition -> exp . MAJ exp
    (42) condition -> exp . EQ EQ exp
    (43) condition -> exp . MAJ_EQ exp
    (44) condition -> exp . MIN_EQ exp
    (45) arigmethic -> exp . PLUS exp
    (46) arigmethic -> exp . MINUS exp
    (47) arigmethic -> exp . STAR exp
    (48) arigmethic -> exp . DIV exp
    (53) unumber_id -> exp . UMINUS

    RC              shift and go to state 74
    OR              shift and go to state 54
    AND             shift and go to state 55
    MIN             shift and go to state 56
    MAJ             shift and go to state 57
    EQ              shift and go to state 58
    MAJ_EQ          shift and go to state 59
    MIN_EQ          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    STAR            shift and go to state 63
    DIV             shift and go to state 64
    UMINUS          shift and go to state 65


state 51

    (16) while_stmt -> WHILE RO exp . RC stmt
    (38) condition -> exp . OR exp
    (39) condition -> exp . AND exp
    (40) condition -> exp . MIN exp
    (41) condition -> exp . MAJ exp
    (42) condition -> exp . EQ EQ exp
    (43) condition -> exp . MAJ_EQ exp
    (44) condition -> exp . MIN_EQ exp
    (45) arigmethic -> exp . PLUS exp
    (46) arigmethic -> exp . MINUS exp
    (47) arigmethic -> exp . STAR exp
    (48) arigmethic -> exp . DIV exp
    (53) unumber_id -> exp . UMINUS

    RC              shift and go to state 75
    OR              shift and go to state 54
    AND             shift and go to state 55
    MIN             shift and go to state 56
    MAJ             shift and go to state 57
    EQ              shift and go to state 58
    MAJ_EQ          shift and go to state 59
    MIN_EQ          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    STAR            shift and go to state 63
    DIV             shift and go to state 64
    UMINUS          shift and go to state 65


state 52

    (18) block_stmt -> BO stmt_list BC .

    IF              reduce using rule 18 (block_stmt -> BO stmt_list BC .)
    WHILE           reduce using rule 18 (block_stmt -> BO stmt_list BC .)
    BO              reduce using rule 18 (block_stmt -> BO stmt_list BC .)
    PRINT           reduce using rule 18 (block_stmt -> BO stmt_list BC .)
    ID              reduce using rule 18 (block_stmt -> BO stmt_list BC .)
    $end            reduce using rule 18 (block_stmt -> BO stmt_list BC .)
    BC              reduce using rule 18 (block_stmt -> BO stmt_list BC .)
    ELSE            reduce using rule 18 (block_stmt -> BO stmt_list BC .)


state 53

    (17) print_stmt -> PRINT exp S .

    IF              reduce using rule 17 (print_stmt -> PRINT exp S .)
    WHILE           reduce using rule 17 (print_stmt -> PRINT exp S .)
    BO              reduce using rule 17 (print_stmt -> PRINT exp S .)
    PRINT           reduce using rule 17 (print_stmt -> PRINT exp S .)
    ID              reduce using rule 17 (print_stmt -> PRINT exp S .)
    $end            reduce using rule 17 (print_stmt -> PRINT exp S .)
    BC              reduce using rule 17 (print_stmt -> PRINT exp S .)
    ELSE            reduce using rule 17 (print_stmt -> PRINT exp S .)


state 54

    (38) condition -> exp OR . exp
    (32) exp -> . RO exp RC
    (33) exp -> . condition
    (34) exp -> . arigmethic
    (35) exp -> . number_id
    (36) exp -> . unumber_id
    (37) condition -> . NOT exp
    (38) condition -> . exp OR exp
    (39) condition -> . exp AND exp
    (40) condition -> . exp MIN exp
    (41) condition -> . exp MAJ exp
    (42) condition -> . exp EQ EQ exp
    (43) condition -> . exp MAJ_EQ exp
    (44) condition -> . exp MIN_EQ exp
    (45) arigmethic -> . exp PLUS exp
    (46) arigmethic -> . exp MINUS exp
    (47) arigmethic -> . exp STAR exp
    (48) arigmethic -> . exp DIV exp
    (49) number_id -> . id
    (50) number_id -> . INT
    (51) number_id -> . DOUBLE
    (52) unumber_id -> . UMINUS
    (53) unumber_id -> . exp UMINUS
    (54) unumber_id -> . MINUS exp
    (30) id -> . ID
    (31) id -> . ID id_array

    RO              shift and go to state 30
    NOT             shift and go to state 35
    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    UMINUS          shift and go to state 40
    MINUS           shift and go to state 36
    ID              shift and go to state 20

    exp                            shift and go to state 76
    condition                      shift and go to state 31
    arigmethic                     shift and go to state 32
    number_id                      shift and go to state 33
    unumber_id                     shift and go to state 34
    id                             shift and go to state 37

state 55

    (39) condition -> exp AND . exp
    (32) exp -> . RO exp RC
    (33) exp -> . condition
    (34) exp -> . arigmethic
    (35) exp -> . number_id
    (36) exp -> . unumber_id
    (37) condition -> . NOT exp
    (38) condition -> . exp OR exp
    (39) condition -> . exp AND exp
    (40) condition -> . exp MIN exp
    (41) condition -> . exp MAJ exp
    (42) condition -> . exp EQ EQ exp
    (43) condition -> . exp MAJ_EQ exp
    (44) condition -> . exp MIN_EQ exp
    (45) arigmethic -> . exp PLUS exp
    (46) arigmethic -> . exp MINUS exp
    (47) arigmethic -> . exp STAR exp
    (48) arigmethic -> . exp DIV exp
    (49) number_id -> . id
    (50) number_id -> . INT
    (51) number_id -> . DOUBLE
    (52) unumber_id -> . UMINUS
    (53) unumber_id -> . exp UMINUS
    (54) unumber_id -> . MINUS exp
    (30) id -> . ID
    (31) id -> . ID id_array

    RO              shift and go to state 30
    NOT             shift and go to state 35
    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    UMINUS          shift and go to state 40
    MINUS           shift and go to state 36
    ID              shift and go to state 20

    exp                            shift and go to state 77
    condition                      shift and go to state 31
    arigmethic                     shift and go to state 32
    number_id                      shift and go to state 33
    unumber_id                     shift and go to state 34
    id                             shift and go to state 37

state 56

    (40) condition -> exp MIN . exp
    (32) exp -> . RO exp RC
    (33) exp -> . condition
    (34) exp -> . arigmethic
    (35) exp -> . number_id
    (36) exp -> . unumber_id
    (37) condition -> . NOT exp
    (38) condition -> . exp OR exp
    (39) condition -> . exp AND exp
    (40) condition -> . exp MIN exp
    (41) condition -> . exp MAJ exp
    (42) condition -> . exp EQ EQ exp
    (43) condition -> . exp MAJ_EQ exp
    (44) condition -> . exp MIN_EQ exp
    (45) arigmethic -> . exp PLUS exp
    (46) arigmethic -> . exp MINUS exp
    (47) arigmethic -> . exp STAR exp
    (48) arigmethic -> . exp DIV exp
    (49) number_id -> . id
    (50) number_id -> . INT
    (51) number_id -> . DOUBLE
    (52) unumber_id -> . UMINUS
    (53) unumber_id -> . exp UMINUS
    (54) unumber_id -> . MINUS exp
    (30) id -> . ID
    (31) id -> . ID id_array

    RO              shift and go to state 30
    NOT             shift and go to state 35
    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    UMINUS          shift and go to state 40
    MINUS           shift and go to state 36
    ID              shift and go to state 20

    exp                            shift and go to state 78
    condition                      shift and go to state 31
    arigmethic                     shift and go to state 32
    number_id                      shift and go to state 33
    unumber_id                     shift and go to state 34
    id                             shift and go to state 37

state 57

    (41) condition -> exp MAJ . exp
    (32) exp -> . RO exp RC
    (33) exp -> . condition
    (34) exp -> . arigmethic
    (35) exp -> . number_id
    (36) exp -> . unumber_id
    (37) condition -> . NOT exp
    (38) condition -> . exp OR exp
    (39) condition -> . exp AND exp
    (40) condition -> . exp MIN exp
    (41) condition -> . exp MAJ exp
    (42) condition -> . exp EQ EQ exp
    (43) condition -> . exp MAJ_EQ exp
    (44) condition -> . exp MIN_EQ exp
    (45) arigmethic -> . exp PLUS exp
    (46) arigmethic -> . exp MINUS exp
    (47) arigmethic -> . exp STAR exp
    (48) arigmethic -> . exp DIV exp
    (49) number_id -> . id
    (50) number_id -> . INT
    (51) number_id -> . DOUBLE
    (52) unumber_id -> . UMINUS
    (53) unumber_id -> . exp UMINUS
    (54) unumber_id -> . MINUS exp
    (30) id -> . ID
    (31) id -> . ID id_array

    RO              shift and go to state 30
    NOT             shift and go to state 35
    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    UMINUS          shift and go to state 40
    MINUS           shift and go to state 36
    ID              shift and go to state 20

    exp                            shift and go to state 79
    condition                      shift and go to state 31
    arigmethic                     shift and go to state 32
    number_id                      shift and go to state 33
    unumber_id                     shift and go to state 34
    id                             shift and go to state 37

state 58

    (42) condition -> exp EQ . EQ exp

    EQ              shift and go to state 80


state 59

    (43) condition -> exp MAJ_EQ . exp
    (32) exp -> . RO exp RC
    (33) exp -> . condition
    (34) exp -> . arigmethic
    (35) exp -> . number_id
    (36) exp -> . unumber_id
    (37) condition -> . NOT exp
    (38) condition -> . exp OR exp
    (39) condition -> . exp AND exp
    (40) condition -> . exp MIN exp
    (41) condition -> . exp MAJ exp
    (42) condition -> . exp EQ EQ exp
    (43) condition -> . exp MAJ_EQ exp
    (44) condition -> . exp MIN_EQ exp
    (45) arigmethic -> . exp PLUS exp
    (46) arigmethic -> . exp MINUS exp
    (47) arigmethic -> . exp STAR exp
    (48) arigmethic -> . exp DIV exp
    (49) number_id -> . id
    (50) number_id -> . INT
    (51) number_id -> . DOUBLE
    (52) unumber_id -> . UMINUS
    (53) unumber_id -> . exp UMINUS
    (54) unumber_id -> . MINUS exp
    (30) id -> . ID
    (31) id -> . ID id_array

    RO              shift and go to state 30
    NOT             shift and go to state 35
    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    UMINUS          shift and go to state 40
    MINUS           shift and go to state 36
    ID              shift and go to state 20

    exp                            shift and go to state 81
    condition                      shift and go to state 31
    arigmethic                     shift and go to state 32
    number_id                      shift and go to state 33
    unumber_id                     shift and go to state 34
    id                             shift and go to state 37

state 60

    (44) condition -> exp MIN_EQ . exp
    (32) exp -> . RO exp RC
    (33) exp -> . condition
    (34) exp -> . arigmethic
    (35) exp -> . number_id
    (36) exp -> . unumber_id
    (37) condition -> . NOT exp
    (38) condition -> . exp OR exp
    (39) condition -> . exp AND exp
    (40) condition -> . exp MIN exp
    (41) condition -> . exp MAJ exp
    (42) condition -> . exp EQ EQ exp
    (43) condition -> . exp MAJ_EQ exp
    (44) condition -> . exp MIN_EQ exp
    (45) arigmethic -> . exp PLUS exp
    (46) arigmethic -> . exp MINUS exp
    (47) arigmethic -> . exp STAR exp
    (48) arigmethic -> . exp DIV exp
    (49) number_id -> . id
    (50) number_id -> . INT
    (51) number_id -> . DOUBLE
    (52) unumber_id -> . UMINUS
    (53) unumber_id -> . exp UMINUS
    (54) unumber_id -> . MINUS exp
    (30) id -> . ID
    (31) id -> . ID id_array

    RO              shift and go to state 30
    NOT             shift and go to state 35
    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    UMINUS          shift and go to state 40
    MINUS           shift and go to state 36
    ID              shift and go to state 20

    exp                            shift and go to state 82
    condition                      shift and go to state 31
    arigmethic                     shift and go to state 32
    number_id                      shift and go to state 33
    unumber_id                     shift and go to state 34
    id                             shift and go to state 37

state 61

    (45) arigmethic -> exp PLUS . exp
    (32) exp -> . RO exp RC
    (33) exp -> . condition
    (34) exp -> . arigmethic
    (35) exp -> . number_id
    (36) exp -> . unumber_id
    (37) condition -> . NOT exp
    (38) condition -> . exp OR exp
    (39) condition -> . exp AND exp
    (40) condition -> . exp MIN exp
    (41) condition -> . exp MAJ exp
    (42) condition -> . exp EQ EQ exp
    (43) condition -> . exp MAJ_EQ exp
    (44) condition -> . exp MIN_EQ exp
    (45) arigmethic -> . exp PLUS exp
    (46) arigmethic -> . exp MINUS exp
    (47) arigmethic -> . exp STAR exp
    (48) arigmethic -> . exp DIV exp
    (49) number_id -> . id
    (50) number_id -> . INT
    (51) number_id -> . DOUBLE
    (52) unumber_id -> . UMINUS
    (53) unumber_id -> . exp UMINUS
    (54) unumber_id -> . MINUS exp
    (30) id -> . ID
    (31) id -> . ID id_array

    RO              shift and go to state 30
    NOT             shift and go to state 35
    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    UMINUS          shift and go to state 40
    MINUS           shift and go to state 36
    ID              shift and go to state 20

    exp                            shift and go to state 83
    condition                      shift and go to state 31
    arigmethic                     shift and go to state 32
    number_id                      shift and go to state 33
    unumber_id                     shift and go to state 34
    id                             shift and go to state 37

state 62

    (46) arigmethic -> exp MINUS . exp
    (32) exp -> . RO exp RC
    (33) exp -> . condition
    (34) exp -> . arigmethic
    (35) exp -> . number_id
    (36) exp -> . unumber_id
    (37) condition -> . NOT exp
    (38) condition -> . exp OR exp
    (39) condition -> . exp AND exp
    (40) condition -> . exp MIN exp
    (41) condition -> . exp MAJ exp
    (42) condition -> . exp EQ EQ exp
    (43) condition -> . exp MAJ_EQ exp
    (44) condition -> . exp MIN_EQ exp
    (45) arigmethic -> . exp PLUS exp
    (46) arigmethic -> . exp MINUS exp
    (47) arigmethic -> . exp STAR exp
    (48) arigmethic -> . exp DIV exp
    (49) number_id -> . id
    (50) number_id -> . INT
    (51) number_id -> . DOUBLE
    (52) unumber_id -> . UMINUS
    (53) unumber_id -> . exp UMINUS
    (54) unumber_id -> . MINUS exp
    (30) id -> . ID
    (31) id -> . ID id_array

    RO              shift and go to state 30
    NOT             shift and go to state 35
    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    UMINUS          shift and go to state 40
    MINUS           shift and go to state 36
    ID              shift and go to state 20

    exp                            shift and go to state 84
    condition                      shift and go to state 31
    arigmethic                     shift and go to state 32
    number_id                      shift and go to state 33
    unumber_id                     shift and go to state 34
    id                             shift and go to state 37

state 63

    (47) arigmethic -> exp STAR . exp
    (32) exp -> . RO exp RC
    (33) exp -> . condition
    (34) exp -> . arigmethic
    (35) exp -> . number_id
    (36) exp -> . unumber_id
    (37) condition -> . NOT exp
    (38) condition -> . exp OR exp
    (39) condition -> . exp AND exp
    (40) condition -> . exp MIN exp
    (41) condition -> . exp MAJ exp
    (42) condition -> . exp EQ EQ exp
    (43) condition -> . exp MAJ_EQ exp
    (44) condition -> . exp MIN_EQ exp
    (45) arigmethic -> . exp PLUS exp
    (46) arigmethic -> . exp MINUS exp
    (47) arigmethic -> . exp STAR exp
    (48) arigmethic -> . exp DIV exp
    (49) number_id -> . id
    (50) number_id -> . INT
    (51) number_id -> . DOUBLE
    (52) unumber_id -> . UMINUS
    (53) unumber_id -> . exp UMINUS
    (54) unumber_id -> . MINUS exp
    (30) id -> . ID
    (31) id -> . ID id_array

    RO              shift and go to state 30
    NOT             shift and go to state 35
    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    UMINUS          shift and go to state 40
    MINUS           shift and go to state 36
    ID              shift and go to state 20

    exp                            shift and go to state 85
    condition                      shift and go to state 31
    arigmethic                     shift and go to state 32
    number_id                      shift and go to state 33
    unumber_id                     shift and go to state 34
    id                             shift and go to state 37

state 64

    (48) arigmethic -> exp DIV . exp
    (32) exp -> . RO exp RC
    (33) exp -> . condition
    (34) exp -> . arigmethic
    (35) exp -> . number_id
    (36) exp -> . unumber_id
    (37) condition -> . NOT exp
    (38) condition -> . exp OR exp
    (39) condition -> . exp AND exp
    (40) condition -> . exp MIN exp
    (41) condition -> . exp MAJ exp
    (42) condition -> . exp EQ EQ exp
    (43) condition -> . exp MAJ_EQ exp
    (44) condition -> . exp MIN_EQ exp
    (45) arigmethic -> . exp PLUS exp
    (46) arigmethic -> . exp MINUS exp
    (47) arigmethic -> . exp STAR exp
    (48) arigmethic -> . exp DIV exp
    (49) number_id -> . id
    (50) number_id -> . INT
    (51) number_id -> . DOUBLE
    (52) unumber_id -> . UMINUS
    (53) unumber_id -> . exp UMINUS
    (54) unumber_id -> . MINUS exp
    (30) id -> . ID
    (31) id -> . ID id_array

    RO              shift and go to state 30
    NOT             shift and go to state 35
    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    UMINUS          shift and go to state 40
    MINUS           shift and go to state 36
    ID              shift and go to state 20

    exp                            shift and go to state 86
    condition                      shift and go to state 31
    arigmethic                     shift and go to state 32
    number_id                      shift and go to state 33
    unumber_id                     shift and go to state 34
    id                             shift and go to state 37

state 65

    (53) unumber_id -> exp UMINUS .

    S               reduce using rule 53 (unumber_id -> exp UMINUS .)
    OR              reduce using rule 53 (unumber_id -> exp UMINUS .)
    AND             reduce using rule 53 (unumber_id -> exp UMINUS .)
    MIN             reduce using rule 53 (unumber_id -> exp UMINUS .)
    MAJ             reduce using rule 53 (unumber_id -> exp UMINUS .)
    EQ              reduce using rule 53 (unumber_id -> exp UMINUS .)
    MAJ_EQ          reduce using rule 53 (unumber_id -> exp UMINUS .)
    MIN_EQ          reduce using rule 53 (unumber_id -> exp UMINUS .)
    PLUS            reduce using rule 53 (unumber_id -> exp UMINUS .)
    MINUS           reduce using rule 53 (unumber_id -> exp UMINUS .)
    STAR            reduce using rule 53 (unumber_id -> exp UMINUS .)
    DIV             reduce using rule 53 (unumber_id -> exp UMINUS .)
    UMINUS          reduce using rule 53 (unumber_id -> exp UMINUS .)
    RC              reduce using rule 53 (unumber_id -> exp UMINUS .)


state 66

    (32) exp -> RO exp . RC
    (38) condition -> exp . OR exp
    (39) condition -> exp . AND exp
    (40) condition -> exp . MIN exp
    (41) condition -> exp . MAJ exp
    (42) condition -> exp . EQ EQ exp
    (43) condition -> exp . MAJ_EQ exp
    (44) condition -> exp . MIN_EQ exp
    (45) arigmethic -> exp . PLUS exp
    (46) arigmethic -> exp . MINUS exp
    (47) arigmethic -> exp . STAR exp
    (48) arigmethic -> exp . DIV exp
    (53) unumber_id -> exp . UMINUS

    RC              shift and go to state 87
    OR              shift and go to state 54
    AND             shift and go to state 55
    MIN             shift and go to state 56
    MAJ             shift and go to state 57
    EQ              shift and go to state 58
    MAJ_EQ          shift and go to state 59
    MIN_EQ          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    STAR            shift and go to state 63
    DIV             shift and go to state 64
    UMINUS          shift and go to state 65


state 67

    (37) condition -> NOT exp .
    (38) condition -> exp . OR exp
    (39) condition -> exp . AND exp
    (40) condition -> exp . MIN exp
    (41) condition -> exp . MAJ exp
    (42) condition -> exp . EQ EQ exp
    (43) condition -> exp . MAJ_EQ exp
    (44) condition -> exp . MIN_EQ exp
    (45) arigmethic -> exp . PLUS exp
    (46) arigmethic -> exp . MINUS exp
    (47) arigmethic -> exp . STAR exp
    (48) arigmethic -> exp . DIV exp
    (53) unumber_id -> exp . UMINUS

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for MIN resolved as shift
  ! shift/reduce conflict for MAJ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for MAJ_EQ resolved as shift
  ! shift/reduce conflict for MIN_EQ resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
    S               reduce using rule 37 (condition -> NOT exp .)
    RC              reduce using rule 37 (condition -> NOT exp .)
    OR              shift and go to state 54
    AND             shift and go to state 55
    MIN             shift and go to state 56
    MAJ             shift and go to state 57
    EQ              shift and go to state 58
    MAJ_EQ          shift and go to state 59
    MIN_EQ          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    STAR            shift and go to state 63
    DIV             shift and go to state 64
    UMINUS          shift and go to state 65

  ! OR              [ reduce using rule 37 (condition -> NOT exp .) ]
  ! AND             [ reduce using rule 37 (condition -> NOT exp .) ]
  ! MIN             [ reduce using rule 37 (condition -> NOT exp .) ]
  ! MAJ             [ reduce using rule 37 (condition -> NOT exp .) ]
  ! EQ              [ reduce using rule 37 (condition -> NOT exp .) ]
  ! MAJ_EQ          [ reduce using rule 37 (condition -> NOT exp .) ]
  ! MIN_EQ          [ reduce using rule 37 (condition -> NOT exp .) ]
  ! PLUS            [ reduce using rule 37 (condition -> NOT exp .) ]
  ! MINUS           [ reduce using rule 37 (condition -> NOT exp .) ]
  ! STAR            [ reduce using rule 37 (condition -> NOT exp .) ]
  ! DIV             [ reduce using rule 37 (condition -> NOT exp .) ]
  ! UMINUS          [ reduce using rule 37 (condition -> NOT exp .) ]


state 68

    (54) unumber_id -> MINUS exp .
    (38) condition -> exp . OR exp
    (39) condition -> exp . AND exp
    (40) condition -> exp . MIN exp
    (41) condition -> exp . MAJ exp
    (42) condition -> exp . EQ EQ exp
    (43) condition -> exp . MAJ_EQ exp
    (44) condition -> exp . MIN_EQ exp
    (45) arigmethic -> exp . PLUS exp
    (46) arigmethic -> exp . MINUS exp
    (47) arigmethic -> exp . STAR exp
    (48) arigmethic -> exp . DIV exp
    (53) unumber_id -> exp . UMINUS

    S               reduce using rule 54 (unumber_id -> MINUS exp .)
    OR              reduce using rule 54 (unumber_id -> MINUS exp .)
    AND             reduce using rule 54 (unumber_id -> MINUS exp .)
    MIN             reduce using rule 54 (unumber_id -> MINUS exp .)
    MAJ             reduce using rule 54 (unumber_id -> MINUS exp .)
    EQ              reduce using rule 54 (unumber_id -> MINUS exp .)
    MAJ_EQ          reduce using rule 54 (unumber_id -> MINUS exp .)
    MIN_EQ          reduce using rule 54 (unumber_id -> MINUS exp .)
    PLUS            reduce using rule 54 (unumber_id -> MINUS exp .)
    MINUS           reduce using rule 54 (unumber_id -> MINUS exp .)
    STAR            reduce using rule 54 (unumber_id -> MINUS exp .)
    DIV             reduce using rule 54 (unumber_id -> MINUS exp .)
    RC              reduce using rule 54 (unumber_id -> MINUS exp .)
    UMINUS          shift and go to state 65

  ! UMINUS          [ reduce using rule 54 (unumber_id -> MINUS exp .) ]
  ! OR              [ shift and go to state 54 ]
  ! AND             [ shift and go to state 55 ]
  ! MIN             [ shift and go to state 56 ]
  ! MAJ             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! MAJ_EQ          [ shift and go to state 59 ]
  ! MIN_EQ          [ shift and go to state 60 ]
  ! PLUS            [ shift and go to state 61 ]
  ! MINUS           [ shift and go to state 62 ]
  ! STAR            [ shift and go to state 63 ]
  ! DIV             [ shift and go to state 64 ]


state 69

    (19) assignment -> id EQ exp . S
    (38) condition -> exp . OR exp
    (39) condition -> exp . AND exp
    (40) condition -> exp . MIN exp
    (41) condition -> exp . MAJ exp
    (42) condition -> exp . EQ EQ exp
    (43) condition -> exp . MAJ_EQ exp
    (44) condition -> exp . MIN_EQ exp
    (45) arigmethic -> exp . PLUS exp
    (46) arigmethic -> exp . MINUS exp
    (47) arigmethic -> exp . STAR exp
    (48) arigmethic -> exp . DIV exp
    (53) unumber_id -> exp . UMINUS

    S               shift and go to state 88
    OR              shift and go to state 54
    AND             shift and go to state 55
    MIN             shift and go to state 56
    MAJ             shift and go to state 57
    EQ              shift and go to state 58
    MAJ_EQ          shift and go to state 59
    MIN_EQ          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    STAR            shift and go to state 63
    DIV             shift and go to state 64
    UMINUS          shift and go to state 65


state 70

    (27) id_array -> SO INT . SC id_array

    SC              shift and go to state 89


state 71

    (28) id_array -> SO id . SC id_array

    SC              shift and go to state 90


state 72

    (23) var_list -> var CM var_list .

    S               reduce using rule 23 (var_list -> var CM var_list .)


state 73

    (26) array -> SO INT . SC array

    SC              shift and go to state 91


state 74

    (13) if_stmt -> IF RO exp RC . stmt else_stmt
    (8) stmt -> . if_stmt
    (9) stmt -> . while_stmt
    (10) stmt -> . block_stmt
    (11) stmt -> . print_stmt
    (12) stmt -> . assignment
    (13) if_stmt -> . IF RO exp RC stmt else_stmt
    (16) while_stmt -> . WHILE RO exp RC stmt
    (18) block_stmt -> . BO stmt_list BC
    (17) print_stmt -> . PRINT exp S
    (19) assignment -> . id EQ exp S
    (30) id -> . ID
    (31) id -> . ID id_array

    IF              shift and go to state 15
    WHILE           shift and go to state 16
    BO              shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 20

    stmt                           shift and go to state 92
    if_stmt                        shift and go to state 10
    while_stmt                     shift and go to state 11
    block_stmt                     shift and go to state 12
    print_stmt                     shift and go to state 13
    assignment                     shift and go to state 14
    id                             shift and go to state 19

state 75

    (16) while_stmt -> WHILE RO exp RC . stmt
    (8) stmt -> . if_stmt
    (9) stmt -> . while_stmt
    (10) stmt -> . block_stmt
    (11) stmt -> . print_stmt
    (12) stmt -> . assignment
    (13) if_stmt -> . IF RO exp RC stmt else_stmt
    (16) while_stmt -> . WHILE RO exp RC stmt
    (18) block_stmt -> . BO stmt_list BC
    (17) print_stmt -> . PRINT exp S
    (19) assignment -> . id EQ exp S
    (30) id -> . ID
    (31) id -> . ID id_array

    IF              shift and go to state 15
    WHILE           shift and go to state 16
    BO              shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 20

    stmt                           shift and go to state 93
    if_stmt                        shift and go to state 10
    while_stmt                     shift and go to state 11
    block_stmt                     shift and go to state 12
    print_stmt                     shift and go to state 13
    assignment                     shift and go to state 14
    id                             shift and go to state 19

state 76

    (38) condition -> exp OR exp .
    (38) condition -> exp . OR exp
    (39) condition -> exp . AND exp
    (40) condition -> exp . MIN exp
    (41) condition -> exp . MAJ exp
    (42) condition -> exp . EQ EQ exp
    (43) condition -> exp . MAJ_EQ exp
    (44) condition -> exp . MIN_EQ exp
    (45) arigmethic -> exp . PLUS exp
    (46) arigmethic -> exp . MINUS exp
    (47) arigmethic -> exp . STAR exp
    (48) arigmethic -> exp . DIV exp
    (53) unumber_id -> exp . UMINUS

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for MIN resolved as shift
  ! shift/reduce conflict for MAJ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for MAJ_EQ resolved as shift
  ! shift/reduce conflict for MIN_EQ resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
    S               reduce using rule 38 (condition -> exp OR exp .)
    RC              reduce using rule 38 (condition -> exp OR exp .)
    OR              shift and go to state 54
    AND             shift and go to state 55
    MIN             shift and go to state 56
    MAJ             shift and go to state 57
    EQ              shift and go to state 58
    MAJ_EQ          shift and go to state 59
    MIN_EQ          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    STAR            shift and go to state 63
    DIV             shift and go to state 64
    UMINUS          shift and go to state 65

  ! OR              [ reduce using rule 38 (condition -> exp OR exp .) ]
  ! AND             [ reduce using rule 38 (condition -> exp OR exp .) ]
  ! MIN             [ reduce using rule 38 (condition -> exp OR exp .) ]
  ! MAJ             [ reduce using rule 38 (condition -> exp OR exp .) ]
  ! EQ              [ reduce using rule 38 (condition -> exp OR exp .) ]
  ! MAJ_EQ          [ reduce using rule 38 (condition -> exp OR exp .) ]
  ! MIN_EQ          [ reduce using rule 38 (condition -> exp OR exp .) ]
  ! PLUS            [ reduce using rule 38 (condition -> exp OR exp .) ]
  ! MINUS           [ reduce using rule 38 (condition -> exp OR exp .) ]
  ! STAR            [ reduce using rule 38 (condition -> exp OR exp .) ]
  ! DIV             [ reduce using rule 38 (condition -> exp OR exp .) ]
  ! UMINUS          [ reduce using rule 38 (condition -> exp OR exp .) ]


state 77

    (39) condition -> exp AND exp .
    (38) condition -> exp . OR exp
    (39) condition -> exp . AND exp
    (40) condition -> exp . MIN exp
    (41) condition -> exp . MAJ exp
    (42) condition -> exp . EQ EQ exp
    (43) condition -> exp . MAJ_EQ exp
    (44) condition -> exp . MIN_EQ exp
    (45) arigmethic -> exp . PLUS exp
    (46) arigmethic -> exp . MINUS exp
    (47) arigmethic -> exp . STAR exp
    (48) arigmethic -> exp . DIV exp
    (53) unumber_id -> exp . UMINUS

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for MIN resolved as shift
  ! shift/reduce conflict for MAJ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for MAJ_EQ resolved as shift
  ! shift/reduce conflict for MIN_EQ resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
    S               reduce using rule 39 (condition -> exp AND exp .)
    RC              reduce using rule 39 (condition -> exp AND exp .)
    OR              shift and go to state 54
    AND             shift and go to state 55
    MIN             shift and go to state 56
    MAJ             shift and go to state 57
    EQ              shift and go to state 58
    MAJ_EQ          shift and go to state 59
    MIN_EQ          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    STAR            shift and go to state 63
    DIV             shift and go to state 64
    UMINUS          shift and go to state 65

  ! OR              [ reduce using rule 39 (condition -> exp AND exp .) ]
  ! AND             [ reduce using rule 39 (condition -> exp AND exp .) ]
  ! MIN             [ reduce using rule 39 (condition -> exp AND exp .) ]
  ! MAJ             [ reduce using rule 39 (condition -> exp AND exp .) ]
  ! EQ              [ reduce using rule 39 (condition -> exp AND exp .) ]
  ! MAJ_EQ          [ reduce using rule 39 (condition -> exp AND exp .) ]
  ! MIN_EQ          [ reduce using rule 39 (condition -> exp AND exp .) ]
  ! PLUS            [ reduce using rule 39 (condition -> exp AND exp .) ]
  ! MINUS           [ reduce using rule 39 (condition -> exp AND exp .) ]
  ! STAR            [ reduce using rule 39 (condition -> exp AND exp .) ]
  ! DIV             [ reduce using rule 39 (condition -> exp AND exp .) ]
  ! UMINUS          [ reduce using rule 39 (condition -> exp AND exp .) ]


state 78

    (40) condition -> exp MIN exp .
    (38) condition -> exp . OR exp
    (39) condition -> exp . AND exp
    (40) condition -> exp . MIN exp
    (41) condition -> exp . MAJ exp
    (42) condition -> exp . EQ EQ exp
    (43) condition -> exp . MAJ_EQ exp
    (44) condition -> exp . MIN_EQ exp
    (45) arigmethic -> exp . PLUS exp
    (46) arigmethic -> exp . MINUS exp
    (47) arigmethic -> exp . STAR exp
    (48) arigmethic -> exp . DIV exp
    (53) unumber_id -> exp . UMINUS

    S               reduce using rule 40 (condition -> exp MIN exp .)
    OR              reduce using rule 40 (condition -> exp MIN exp .)
    AND             reduce using rule 40 (condition -> exp MIN exp .)
    MIN             reduce using rule 40 (condition -> exp MIN exp .)
    MAJ             reduce using rule 40 (condition -> exp MIN exp .)
    EQ              reduce using rule 40 (condition -> exp MIN exp .)
    MAJ_EQ          reduce using rule 40 (condition -> exp MIN exp .)
    MIN_EQ          reduce using rule 40 (condition -> exp MIN exp .)
    RC              reduce using rule 40 (condition -> exp MIN exp .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    STAR            shift and go to state 63
    DIV             shift and go to state 64
    UMINUS          shift and go to state 65

  ! PLUS            [ reduce using rule 40 (condition -> exp MIN exp .) ]
  ! MINUS           [ reduce using rule 40 (condition -> exp MIN exp .) ]
  ! STAR            [ reduce using rule 40 (condition -> exp MIN exp .) ]
  ! DIV             [ reduce using rule 40 (condition -> exp MIN exp .) ]
  ! UMINUS          [ reduce using rule 40 (condition -> exp MIN exp .) ]
  ! OR              [ shift and go to state 54 ]
  ! AND             [ shift and go to state 55 ]
  ! MIN             [ shift and go to state 56 ]
  ! MAJ             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! MAJ_EQ          [ shift and go to state 59 ]
  ! MIN_EQ          [ shift and go to state 60 ]


state 79

    (41) condition -> exp MAJ exp .
    (38) condition -> exp . OR exp
    (39) condition -> exp . AND exp
    (40) condition -> exp . MIN exp
    (41) condition -> exp . MAJ exp
    (42) condition -> exp . EQ EQ exp
    (43) condition -> exp . MAJ_EQ exp
    (44) condition -> exp . MIN_EQ exp
    (45) arigmethic -> exp . PLUS exp
    (46) arigmethic -> exp . MINUS exp
    (47) arigmethic -> exp . STAR exp
    (48) arigmethic -> exp . DIV exp
    (53) unumber_id -> exp . UMINUS

    S               reduce using rule 41 (condition -> exp MAJ exp .)
    OR              reduce using rule 41 (condition -> exp MAJ exp .)
    AND             reduce using rule 41 (condition -> exp MAJ exp .)
    MIN             reduce using rule 41 (condition -> exp MAJ exp .)
    MAJ             reduce using rule 41 (condition -> exp MAJ exp .)
    EQ              reduce using rule 41 (condition -> exp MAJ exp .)
    MAJ_EQ          reduce using rule 41 (condition -> exp MAJ exp .)
    MIN_EQ          reduce using rule 41 (condition -> exp MAJ exp .)
    RC              reduce using rule 41 (condition -> exp MAJ exp .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    STAR            shift and go to state 63
    DIV             shift and go to state 64
    UMINUS          shift and go to state 65

  ! PLUS            [ reduce using rule 41 (condition -> exp MAJ exp .) ]
  ! MINUS           [ reduce using rule 41 (condition -> exp MAJ exp .) ]
  ! STAR            [ reduce using rule 41 (condition -> exp MAJ exp .) ]
  ! DIV             [ reduce using rule 41 (condition -> exp MAJ exp .) ]
  ! UMINUS          [ reduce using rule 41 (condition -> exp MAJ exp .) ]
  ! OR              [ shift and go to state 54 ]
  ! AND             [ shift and go to state 55 ]
  ! MIN             [ shift and go to state 56 ]
  ! MAJ             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! MAJ_EQ          [ shift and go to state 59 ]
  ! MIN_EQ          [ shift and go to state 60 ]


state 80

    (42) condition -> exp EQ EQ . exp
    (32) exp -> . RO exp RC
    (33) exp -> . condition
    (34) exp -> . arigmethic
    (35) exp -> . number_id
    (36) exp -> . unumber_id
    (37) condition -> . NOT exp
    (38) condition -> . exp OR exp
    (39) condition -> . exp AND exp
    (40) condition -> . exp MIN exp
    (41) condition -> . exp MAJ exp
    (42) condition -> . exp EQ EQ exp
    (43) condition -> . exp MAJ_EQ exp
    (44) condition -> . exp MIN_EQ exp
    (45) arigmethic -> . exp PLUS exp
    (46) arigmethic -> . exp MINUS exp
    (47) arigmethic -> . exp STAR exp
    (48) arigmethic -> . exp DIV exp
    (49) number_id -> . id
    (50) number_id -> . INT
    (51) number_id -> . DOUBLE
    (52) unumber_id -> . UMINUS
    (53) unumber_id -> . exp UMINUS
    (54) unumber_id -> . MINUS exp
    (30) id -> . ID
    (31) id -> . ID id_array

    RO              shift and go to state 30
    NOT             shift and go to state 35
    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    UMINUS          shift and go to state 40
    MINUS           shift and go to state 36
    ID              shift and go to state 20

    exp                            shift and go to state 94
    condition                      shift and go to state 31
    arigmethic                     shift and go to state 32
    number_id                      shift and go to state 33
    unumber_id                     shift and go to state 34
    id                             shift and go to state 37

state 81

    (43) condition -> exp MAJ_EQ exp .
    (38) condition -> exp . OR exp
    (39) condition -> exp . AND exp
    (40) condition -> exp . MIN exp
    (41) condition -> exp . MAJ exp
    (42) condition -> exp . EQ EQ exp
    (43) condition -> exp . MAJ_EQ exp
    (44) condition -> exp . MIN_EQ exp
    (45) arigmethic -> exp . PLUS exp
    (46) arigmethic -> exp . MINUS exp
    (47) arigmethic -> exp . STAR exp
    (48) arigmethic -> exp . DIV exp
    (53) unumber_id -> exp . UMINUS

    S               reduce using rule 43 (condition -> exp MAJ_EQ exp .)
    OR              reduce using rule 43 (condition -> exp MAJ_EQ exp .)
    AND             reduce using rule 43 (condition -> exp MAJ_EQ exp .)
    MIN             reduce using rule 43 (condition -> exp MAJ_EQ exp .)
    MAJ             reduce using rule 43 (condition -> exp MAJ_EQ exp .)
    EQ              reduce using rule 43 (condition -> exp MAJ_EQ exp .)
    MAJ_EQ          reduce using rule 43 (condition -> exp MAJ_EQ exp .)
    MIN_EQ          reduce using rule 43 (condition -> exp MAJ_EQ exp .)
    RC              reduce using rule 43 (condition -> exp MAJ_EQ exp .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    STAR            shift and go to state 63
    DIV             shift and go to state 64
    UMINUS          shift and go to state 65

  ! PLUS            [ reduce using rule 43 (condition -> exp MAJ_EQ exp .) ]
  ! MINUS           [ reduce using rule 43 (condition -> exp MAJ_EQ exp .) ]
  ! STAR            [ reduce using rule 43 (condition -> exp MAJ_EQ exp .) ]
  ! DIV             [ reduce using rule 43 (condition -> exp MAJ_EQ exp .) ]
  ! UMINUS          [ reduce using rule 43 (condition -> exp MAJ_EQ exp .) ]
  ! OR              [ shift and go to state 54 ]
  ! AND             [ shift and go to state 55 ]
  ! MIN             [ shift and go to state 56 ]
  ! MAJ             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! MAJ_EQ          [ shift and go to state 59 ]
  ! MIN_EQ          [ shift and go to state 60 ]


state 82

    (44) condition -> exp MIN_EQ exp .
    (38) condition -> exp . OR exp
    (39) condition -> exp . AND exp
    (40) condition -> exp . MIN exp
    (41) condition -> exp . MAJ exp
    (42) condition -> exp . EQ EQ exp
    (43) condition -> exp . MAJ_EQ exp
    (44) condition -> exp . MIN_EQ exp
    (45) arigmethic -> exp . PLUS exp
    (46) arigmethic -> exp . MINUS exp
    (47) arigmethic -> exp . STAR exp
    (48) arigmethic -> exp . DIV exp
    (53) unumber_id -> exp . UMINUS

    S               reduce using rule 44 (condition -> exp MIN_EQ exp .)
    OR              reduce using rule 44 (condition -> exp MIN_EQ exp .)
    AND             reduce using rule 44 (condition -> exp MIN_EQ exp .)
    MIN             reduce using rule 44 (condition -> exp MIN_EQ exp .)
    MAJ             reduce using rule 44 (condition -> exp MIN_EQ exp .)
    EQ              reduce using rule 44 (condition -> exp MIN_EQ exp .)
    MAJ_EQ          reduce using rule 44 (condition -> exp MIN_EQ exp .)
    MIN_EQ          reduce using rule 44 (condition -> exp MIN_EQ exp .)
    RC              reduce using rule 44 (condition -> exp MIN_EQ exp .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    STAR            shift and go to state 63
    DIV             shift and go to state 64
    UMINUS          shift and go to state 65

  ! PLUS            [ reduce using rule 44 (condition -> exp MIN_EQ exp .) ]
  ! MINUS           [ reduce using rule 44 (condition -> exp MIN_EQ exp .) ]
  ! STAR            [ reduce using rule 44 (condition -> exp MIN_EQ exp .) ]
  ! DIV             [ reduce using rule 44 (condition -> exp MIN_EQ exp .) ]
  ! UMINUS          [ reduce using rule 44 (condition -> exp MIN_EQ exp .) ]
  ! OR              [ shift and go to state 54 ]
  ! AND             [ shift and go to state 55 ]
  ! MIN             [ shift and go to state 56 ]
  ! MAJ             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! MAJ_EQ          [ shift and go to state 59 ]
  ! MIN_EQ          [ shift and go to state 60 ]


state 83

    (45) arigmethic -> exp PLUS exp .
    (38) condition -> exp . OR exp
    (39) condition -> exp . AND exp
    (40) condition -> exp . MIN exp
    (41) condition -> exp . MAJ exp
    (42) condition -> exp . EQ EQ exp
    (43) condition -> exp . MAJ_EQ exp
    (44) condition -> exp . MIN_EQ exp
    (45) arigmethic -> exp . PLUS exp
    (46) arigmethic -> exp . MINUS exp
    (47) arigmethic -> exp . STAR exp
    (48) arigmethic -> exp . DIV exp
    (53) unumber_id -> exp . UMINUS

    S               reduce using rule 45 (arigmethic -> exp PLUS exp .)
    OR              reduce using rule 45 (arigmethic -> exp PLUS exp .)
    AND             reduce using rule 45 (arigmethic -> exp PLUS exp .)
    MIN             reduce using rule 45 (arigmethic -> exp PLUS exp .)
    MAJ             reduce using rule 45 (arigmethic -> exp PLUS exp .)
    EQ              reduce using rule 45 (arigmethic -> exp PLUS exp .)
    MAJ_EQ          reduce using rule 45 (arigmethic -> exp PLUS exp .)
    MIN_EQ          reduce using rule 45 (arigmethic -> exp PLUS exp .)
    PLUS            reduce using rule 45 (arigmethic -> exp PLUS exp .)
    MINUS           reduce using rule 45 (arigmethic -> exp PLUS exp .)
    RC              reduce using rule 45 (arigmethic -> exp PLUS exp .)
    STAR            shift and go to state 63
    DIV             shift and go to state 64
    UMINUS          shift and go to state 65

  ! STAR            [ reduce using rule 45 (arigmethic -> exp PLUS exp .) ]
  ! DIV             [ reduce using rule 45 (arigmethic -> exp PLUS exp .) ]
  ! UMINUS          [ reduce using rule 45 (arigmethic -> exp PLUS exp .) ]
  ! OR              [ shift and go to state 54 ]
  ! AND             [ shift and go to state 55 ]
  ! MIN             [ shift and go to state 56 ]
  ! MAJ             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! MAJ_EQ          [ shift and go to state 59 ]
  ! MIN_EQ          [ shift and go to state 60 ]
  ! PLUS            [ shift and go to state 61 ]
  ! MINUS           [ shift and go to state 62 ]


state 84

    (46) arigmethic -> exp MINUS exp .
    (38) condition -> exp . OR exp
    (39) condition -> exp . AND exp
    (40) condition -> exp . MIN exp
    (41) condition -> exp . MAJ exp
    (42) condition -> exp . EQ EQ exp
    (43) condition -> exp . MAJ_EQ exp
    (44) condition -> exp . MIN_EQ exp
    (45) arigmethic -> exp . PLUS exp
    (46) arigmethic -> exp . MINUS exp
    (47) arigmethic -> exp . STAR exp
    (48) arigmethic -> exp . DIV exp
    (53) unumber_id -> exp . UMINUS

    S               reduce using rule 46 (arigmethic -> exp MINUS exp .)
    OR              reduce using rule 46 (arigmethic -> exp MINUS exp .)
    AND             reduce using rule 46 (arigmethic -> exp MINUS exp .)
    MIN             reduce using rule 46 (arigmethic -> exp MINUS exp .)
    MAJ             reduce using rule 46 (arigmethic -> exp MINUS exp .)
    EQ              reduce using rule 46 (arigmethic -> exp MINUS exp .)
    MAJ_EQ          reduce using rule 46 (arigmethic -> exp MINUS exp .)
    MIN_EQ          reduce using rule 46 (arigmethic -> exp MINUS exp .)
    PLUS            reduce using rule 46 (arigmethic -> exp MINUS exp .)
    MINUS           reduce using rule 46 (arigmethic -> exp MINUS exp .)
    RC              reduce using rule 46 (arigmethic -> exp MINUS exp .)
    STAR            shift and go to state 63
    DIV             shift and go to state 64
    UMINUS          shift and go to state 65

  ! STAR            [ reduce using rule 46 (arigmethic -> exp MINUS exp .) ]
  ! DIV             [ reduce using rule 46 (arigmethic -> exp MINUS exp .) ]
  ! UMINUS          [ reduce using rule 46 (arigmethic -> exp MINUS exp .) ]
  ! OR              [ shift and go to state 54 ]
  ! AND             [ shift and go to state 55 ]
  ! MIN             [ shift and go to state 56 ]
  ! MAJ             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! MAJ_EQ          [ shift and go to state 59 ]
  ! MIN_EQ          [ shift and go to state 60 ]
  ! PLUS            [ shift and go to state 61 ]
  ! MINUS           [ shift and go to state 62 ]


state 85

    (47) arigmethic -> exp STAR exp .
    (38) condition -> exp . OR exp
    (39) condition -> exp . AND exp
    (40) condition -> exp . MIN exp
    (41) condition -> exp . MAJ exp
    (42) condition -> exp . EQ EQ exp
    (43) condition -> exp . MAJ_EQ exp
    (44) condition -> exp . MIN_EQ exp
    (45) arigmethic -> exp . PLUS exp
    (46) arigmethic -> exp . MINUS exp
    (47) arigmethic -> exp . STAR exp
    (48) arigmethic -> exp . DIV exp
    (53) unumber_id -> exp . UMINUS

    S               reduce using rule 47 (arigmethic -> exp STAR exp .)
    OR              reduce using rule 47 (arigmethic -> exp STAR exp .)
    AND             reduce using rule 47 (arigmethic -> exp STAR exp .)
    MIN             reduce using rule 47 (arigmethic -> exp STAR exp .)
    MAJ             reduce using rule 47 (arigmethic -> exp STAR exp .)
    EQ              reduce using rule 47 (arigmethic -> exp STAR exp .)
    MAJ_EQ          reduce using rule 47 (arigmethic -> exp STAR exp .)
    MIN_EQ          reduce using rule 47 (arigmethic -> exp STAR exp .)
    PLUS            reduce using rule 47 (arigmethic -> exp STAR exp .)
    MINUS           reduce using rule 47 (arigmethic -> exp STAR exp .)
    STAR            reduce using rule 47 (arigmethic -> exp STAR exp .)
    DIV             reduce using rule 47 (arigmethic -> exp STAR exp .)
    RC              reduce using rule 47 (arigmethic -> exp STAR exp .)
    UMINUS          shift and go to state 65

  ! UMINUS          [ reduce using rule 47 (arigmethic -> exp STAR exp .) ]
  ! OR              [ shift and go to state 54 ]
  ! AND             [ shift and go to state 55 ]
  ! MIN             [ shift and go to state 56 ]
  ! MAJ             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! MAJ_EQ          [ shift and go to state 59 ]
  ! MIN_EQ          [ shift and go to state 60 ]
  ! PLUS            [ shift and go to state 61 ]
  ! MINUS           [ shift and go to state 62 ]
  ! STAR            [ shift and go to state 63 ]
  ! DIV             [ shift and go to state 64 ]


state 86

    (48) arigmethic -> exp DIV exp .
    (38) condition -> exp . OR exp
    (39) condition -> exp . AND exp
    (40) condition -> exp . MIN exp
    (41) condition -> exp . MAJ exp
    (42) condition -> exp . EQ EQ exp
    (43) condition -> exp . MAJ_EQ exp
    (44) condition -> exp . MIN_EQ exp
    (45) arigmethic -> exp . PLUS exp
    (46) arigmethic -> exp . MINUS exp
    (47) arigmethic -> exp . STAR exp
    (48) arigmethic -> exp . DIV exp
    (53) unumber_id -> exp . UMINUS

    S               reduce using rule 48 (arigmethic -> exp DIV exp .)
    OR              reduce using rule 48 (arigmethic -> exp DIV exp .)
    AND             reduce using rule 48 (arigmethic -> exp DIV exp .)
    MIN             reduce using rule 48 (arigmethic -> exp DIV exp .)
    MAJ             reduce using rule 48 (arigmethic -> exp DIV exp .)
    EQ              reduce using rule 48 (arigmethic -> exp DIV exp .)
    MAJ_EQ          reduce using rule 48 (arigmethic -> exp DIV exp .)
    MIN_EQ          reduce using rule 48 (arigmethic -> exp DIV exp .)
    PLUS            reduce using rule 48 (arigmethic -> exp DIV exp .)
    MINUS           reduce using rule 48 (arigmethic -> exp DIV exp .)
    STAR            reduce using rule 48 (arigmethic -> exp DIV exp .)
    DIV             reduce using rule 48 (arigmethic -> exp DIV exp .)
    RC              reduce using rule 48 (arigmethic -> exp DIV exp .)
    UMINUS          shift and go to state 65

  ! UMINUS          [ reduce using rule 48 (arigmethic -> exp DIV exp .) ]
  ! OR              [ shift and go to state 54 ]
  ! AND             [ shift and go to state 55 ]
  ! MIN             [ shift and go to state 56 ]
  ! MAJ             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! MAJ_EQ          [ shift and go to state 59 ]
  ! MIN_EQ          [ shift and go to state 60 ]
  ! PLUS            [ shift and go to state 61 ]
  ! MINUS           [ shift and go to state 62 ]
  ! STAR            [ shift and go to state 63 ]
  ! DIV             [ shift and go to state 64 ]


state 87

    (32) exp -> RO exp RC .

    S               reduce using rule 32 (exp -> RO exp RC .)
    OR              reduce using rule 32 (exp -> RO exp RC .)
    AND             reduce using rule 32 (exp -> RO exp RC .)
    MIN             reduce using rule 32 (exp -> RO exp RC .)
    MAJ             reduce using rule 32 (exp -> RO exp RC .)
    EQ              reduce using rule 32 (exp -> RO exp RC .)
    MAJ_EQ          reduce using rule 32 (exp -> RO exp RC .)
    MIN_EQ          reduce using rule 32 (exp -> RO exp RC .)
    PLUS            reduce using rule 32 (exp -> RO exp RC .)
    MINUS           reduce using rule 32 (exp -> RO exp RC .)
    STAR            reduce using rule 32 (exp -> RO exp RC .)
    DIV             reduce using rule 32 (exp -> RO exp RC .)
    UMINUS          reduce using rule 32 (exp -> RO exp RC .)
    RC              reduce using rule 32 (exp -> RO exp RC .)


state 88

    (19) assignment -> id EQ exp S .

    IF              reduce using rule 19 (assignment -> id EQ exp S .)
    WHILE           reduce using rule 19 (assignment -> id EQ exp S .)
    BO              reduce using rule 19 (assignment -> id EQ exp S .)
    PRINT           reduce using rule 19 (assignment -> id EQ exp S .)
    ID              reduce using rule 19 (assignment -> id EQ exp S .)
    $end            reduce using rule 19 (assignment -> id EQ exp S .)
    BC              reduce using rule 19 (assignment -> id EQ exp S .)
    ELSE            reduce using rule 19 (assignment -> id EQ exp S .)


state 89

    (27) id_array -> SO INT SC . id_array
    (27) id_array -> . SO INT SC id_array
    (28) id_array -> . SO id SC id_array
    (29) id_array -> . empty
    (4) empty -> .

    SO              shift and go to state 43
    EQ              reduce using rule 4 (empty -> .)
    S               reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    MIN             reduce using rule 4 (empty -> .)
    MAJ             reduce using rule 4 (empty -> .)
    MAJ_EQ          reduce using rule 4 (empty -> .)
    MIN_EQ          reduce using rule 4 (empty -> .)
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    STAR            reduce using rule 4 (empty -> .)
    DIV             reduce using rule 4 (empty -> .)
    UMINUS          reduce using rule 4 (empty -> .)
    RC              reduce using rule 4 (empty -> .)
    SC              reduce using rule 4 (empty -> .)

    id_array                       shift and go to state 95
    empty                          shift and go to state 44

state 90

    (28) id_array -> SO id SC . id_array
    (27) id_array -> . SO INT SC id_array
    (28) id_array -> . SO id SC id_array
    (29) id_array -> . empty
    (4) empty -> .

    SO              shift and go to state 43
    EQ              reduce using rule 4 (empty -> .)
    S               reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    MIN             reduce using rule 4 (empty -> .)
    MAJ             reduce using rule 4 (empty -> .)
    MAJ_EQ          reduce using rule 4 (empty -> .)
    MIN_EQ          reduce using rule 4 (empty -> .)
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    STAR            reduce using rule 4 (empty -> .)
    DIV             reduce using rule 4 (empty -> .)
    UMINUS          reduce using rule 4 (empty -> .)
    RC              reduce using rule 4 (empty -> .)
    SC              reduce using rule 4 (empty -> .)

    id_array                       shift and go to state 96
    empty                          shift and go to state 44

state 91

    (26) array -> SO INT SC . array
    (25) array -> . empty
    (26) array -> . SO INT SC array
    (4) empty -> .

    SO              shift and go to state 49
    CM              reduce using rule 4 (empty -> .)
    S               reduce using rule 4 (empty -> .)

    array                          shift and go to state 97
    empty                          shift and go to state 48

state 92

    (13) if_stmt -> IF RO exp RC stmt . else_stmt
    (14) else_stmt -> . ELSE stmt
    (15) else_stmt -> . empty
    (4) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 99
    IF              reduce using rule 4 (empty -> .)
    WHILE           reduce using rule 4 (empty -> .)
    BO              reduce using rule 4 (empty -> .)
    PRINT           reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)
    BC              reduce using rule 4 (empty -> .)

  ! ELSE            [ reduce using rule 4 (empty -> .) ]

    else_stmt                      shift and go to state 98
    empty                          shift and go to state 100

state 93

    (16) while_stmt -> WHILE RO exp RC stmt .

    IF              reduce using rule 16 (while_stmt -> WHILE RO exp RC stmt .)
    WHILE           reduce using rule 16 (while_stmt -> WHILE RO exp RC stmt .)
    BO              reduce using rule 16 (while_stmt -> WHILE RO exp RC stmt .)
    PRINT           reduce using rule 16 (while_stmt -> WHILE RO exp RC stmt .)
    ID              reduce using rule 16 (while_stmt -> WHILE RO exp RC stmt .)
    $end            reduce using rule 16 (while_stmt -> WHILE RO exp RC stmt .)
    BC              reduce using rule 16 (while_stmt -> WHILE RO exp RC stmt .)
    ELSE            reduce using rule 16 (while_stmt -> WHILE RO exp RC stmt .)


state 94

    (42) condition -> exp EQ EQ exp .
    (38) condition -> exp . OR exp
    (39) condition -> exp . AND exp
    (40) condition -> exp . MIN exp
    (41) condition -> exp . MAJ exp
    (42) condition -> exp . EQ EQ exp
    (43) condition -> exp . MAJ_EQ exp
    (44) condition -> exp . MIN_EQ exp
    (45) arigmethic -> exp . PLUS exp
    (46) arigmethic -> exp . MINUS exp
    (47) arigmethic -> exp . STAR exp
    (48) arigmethic -> exp . DIV exp
    (53) unumber_id -> exp . UMINUS

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for MIN resolved as shift
  ! shift/reduce conflict for MAJ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for MAJ_EQ resolved as shift
  ! shift/reduce conflict for MIN_EQ resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
    S               reduce using rule 42 (condition -> exp EQ EQ exp .)
    RC              reduce using rule 42 (condition -> exp EQ EQ exp .)
    OR              shift and go to state 54
    AND             shift and go to state 55
    MIN             shift and go to state 56
    MAJ             shift and go to state 57
    EQ              shift and go to state 58
    MAJ_EQ          shift and go to state 59
    MIN_EQ          shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    STAR            shift and go to state 63
    DIV             shift and go to state 64
    UMINUS          shift and go to state 65

  ! OR              [ reduce using rule 42 (condition -> exp EQ EQ exp .) ]
  ! AND             [ reduce using rule 42 (condition -> exp EQ EQ exp .) ]
  ! MIN             [ reduce using rule 42 (condition -> exp EQ EQ exp .) ]
  ! MAJ             [ reduce using rule 42 (condition -> exp EQ EQ exp .) ]
  ! EQ              [ reduce using rule 42 (condition -> exp EQ EQ exp .) ]
  ! MAJ_EQ          [ reduce using rule 42 (condition -> exp EQ EQ exp .) ]
  ! MIN_EQ          [ reduce using rule 42 (condition -> exp EQ EQ exp .) ]
  ! PLUS            [ reduce using rule 42 (condition -> exp EQ EQ exp .) ]
  ! MINUS           [ reduce using rule 42 (condition -> exp EQ EQ exp .) ]
  ! STAR            [ reduce using rule 42 (condition -> exp EQ EQ exp .) ]
  ! DIV             [ reduce using rule 42 (condition -> exp EQ EQ exp .) ]
  ! UMINUS          [ reduce using rule 42 (condition -> exp EQ EQ exp .) ]


state 95

    (27) id_array -> SO INT SC id_array .

    EQ              reduce using rule 27 (id_array -> SO INT SC id_array .)
    S               reduce using rule 27 (id_array -> SO INT SC id_array .)
    OR              reduce using rule 27 (id_array -> SO INT SC id_array .)
    AND             reduce using rule 27 (id_array -> SO INT SC id_array .)
    MIN             reduce using rule 27 (id_array -> SO INT SC id_array .)
    MAJ             reduce using rule 27 (id_array -> SO INT SC id_array .)
    MAJ_EQ          reduce using rule 27 (id_array -> SO INT SC id_array .)
    MIN_EQ          reduce using rule 27 (id_array -> SO INT SC id_array .)
    PLUS            reduce using rule 27 (id_array -> SO INT SC id_array .)
    MINUS           reduce using rule 27 (id_array -> SO INT SC id_array .)
    STAR            reduce using rule 27 (id_array -> SO INT SC id_array .)
    DIV             reduce using rule 27 (id_array -> SO INT SC id_array .)
    UMINUS          reduce using rule 27 (id_array -> SO INT SC id_array .)
    RC              reduce using rule 27 (id_array -> SO INT SC id_array .)
    SC              reduce using rule 27 (id_array -> SO INT SC id_array .)


state 96

    (28) id_array -> SO id SC id_array .

    EQ              reduce using rule 28 (id_array -> SO id SC id_array .)
    S               reduce using rule 28 (id_array -> SO id SC id_array .)
    OR              reduce using rule 28 (id_array -> SO id SC id_array .)
    AND             reduce using rule 28 (id_array -> SO id SC id_array .)
    MIN             reduce using rule 28 (id_array -> SO id SC id_array .)
    MAJ             reduce using rule 28 (id_array -> SO id SC id_array .)
    MAJ_EQ          reduce using rule 28 (id_array -> SO id SC id_array .)
    MIN_EQ          reduce using rule 28 (id_array -> SO id SC id_array .)
    PLUS            reduce using rule 28 (id_array -> SO id SC id_array .)
    MINUS           reduce using rule 28 (id_array -> SO id SC id_array .)
    STAR            reduce using rule 28 (id_array -> SO id SC id_array .)
    DIV             reduce using rule 28 (id_array -> SO id SC id_array .)
    UMINUS          reduce using rule 28 (id_array -> SO id SC id_array .)
    RC              reduce using rule 28 (id_array -> SO id SC id_array .)
    SC              reduce using rule 28 (id_array -> SO id SC id_array .)


state 97

    (26) array -> SO INT SC array .

    CM              reduce using rule 26 (array -> SO INT SC array .)
    S               reduce using rule 26 (array -> SO INT SC array .)


state 98

    (13) if_stmt -> IF RO exp RC stmt else_stmt .

    IF              reduce using rule 13 (if_stmt -> IF RO exp RC stmt else_stmt .)
    WHILE           reduce using rule 13 (if_stmt -> IF RO exp RC stmt else_stmt .)
    BO              reduce using rule 13 (if_stmt -> IF RO exp RC stmt else_stmt .)
    PRINT           reduce using rule 13 (if_stmt -> IF RO exp RC stmt else_stmt .)
    ID              reduce using rule 13 (if_stmt -> IF RO exp RC stmt else_stmt .)
    $end            reduce using rule 13 (if_stmt -> IF RO exp RC stmt else_stmt .)
    BC              reduce using rule 13 (if_stmt -> IF RO exp RC stmt else_stmt .)
    ELSE            reduce using rule 13 (if_stmt -> IF RO exp RC stmt else_stmt .)


state 99

    (14) else_stmt -> ELSE . stmt
    (8) stmt -> . if_stmt
    (9) stmt -> . while_stmt
    (10) stmt -> . block_stmt
    (11) stmt -> . print_stmt
    (12) stmt -> . assignment
    (13) if_stmt -> . IF RO exp RC stmt else_stmt
    (16) while_stmt -> . WHILE RO exp RC stmt
    (18) block_stmt -> . BO stmt_list BC
    (17) print_stmt -> . PRINT exp S
    (19) assignment -> . id EQ exp S
    (30) id -> . ID
    (31) id -> . ID id_array

    IF              shift and go to state 15
    WHILE           shift and go to state 16
    BO              shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 20

    stmt                           shift and go to state 101
    if_stmt                        shift and go to state 10
    while_stmt                     shift and go to state 11
    block_stmt                     shift and go to state 12
    print_stmt                     shift and go to state 13
    assignment                     shift and go to state 14
    id                             shift and go to state 19

state 100

    (15) else_stmt -> empty .

    ELSE            reduce using rule 15 (else_stmt -> empty .)
    IF              reduce using rule 15 (else_stmt -> empty .)
    WHILE           reduce using rule 15 (else_stmt -> empty .)
    BO              reduce using rule 15 (else_stmt -> empty .)
    PRINT           reduce using rule 15 (else_stmt -> empty .)
    ID              reduce using rule 15 (else_stmt -> empty .)
    $end            reduce using rule 15 (else_stmt -> empty .)
    BC              reduce using rule 15 (else_stmt -> empty .)


state 101

    (14) else_stmt -> ELSE stmt .

    ELSE            reduce using rule 14 (else_stmt -> ELSE stmt .)
    IF              reduce using rule 14 (else_stmt -> ELSE stmt .)
    WHILE           reduce using rule 14 (else_stmt -> ELSE stmt .)
    BO              reduce using rule 14 (else_stmt -> ELSE stmt .)
    PRINT           reduce using rule 14 (else_stmt -> ELSE stmt .)
    ID              reduce using rule 14 (else_stmt -> ELSE stmt .)
    $end            reduce using rule 14 (else_stmt -> ELSE stmt .)
    BC              reduce using rule 14 (else_stmt -> ELSE stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OR in state 67 resolved as shift
WARNING: shift/reduce conflict for AND in state 67 resolved as shift
WARNING: shift/reduce conflict for MIN in state 67 resolved as shift
WARNING: shift/reduce conflict for MAJ in state 67 resolved as shift
WARNING: shift/reduce conflict for EQ in state 67 resolved as shift
WARNING: shift/reduce conflict for MAJ_EQ in state 67 resolved as shift
WARNING: shift/reduce conflict for MIN_EQ in state 67 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 67 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 67 resolved as shift
WARNING: shift/reduce conflict for STAR in state 67 resolved as shift
WARNING: shift/reduce conflict for DIV in state 67 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 67 resolved as shift
WARNING: shift/reduce conflict for OR in state 76 resolved as shift
WARNING: shift/reduce conflict for AND in state 76 resolved as shift
WARNING: shift/reduce conflict for MIN in state 76 resolved as shift
WARNING: shift/reduce conflict for MAJ in state 76 resolved as shift
WARNING: shift/reduce conflict for EQ in state 76 resolved as shift
WARNING: shift/reduce conflict for MAJ_EQ in state 76 resolved as shift
WARNING: shift/reduce conflict for MIN_EQ in state 76 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 76 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 76 resolved as shift
WARNING: shift/reduce conflict for STAR in state 76 resolved as shift
WARNING: shift/reduce conflict for DIV in state 76 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 76 resolved as shift
WARNING: shift/reduce conflict for OR in state 77 resolved as shift
WARNING: shift/reduce conflict for AND in state 77 resolved as shift
WARNING: shift/reduce conflict for MIN in state 77 resolved as shift
WARNING: shift/reduce conflict for MAJ in state 77 resolved as shift
WARNING: shift/reduce conflict for EQ in state 77 resolved as shift
WARNING: shift/reduce conflict for MAJ_EQ in state 77 resolved as shift
WARNING: shift/reduce conflict for MIN_EQ in state 77 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 77 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 77 resolved as shift
WARNING: shift/reduce conflict for STAR in state 77 resolved as shift
WARNING: shift/reduce conflict for DIV in state 77 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 77 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 92 resolved as shift
WARNING: shift/reduce conflict for OR in state 94 resolved as shift
WARNING: shift/reduce conflict for AND in state 94 resolved as shift
WARNING: shift/reduce conflict for MIN in state 94 resolved as shift
WARNING: shift/reduce conflict for MAJ in state 94 resolved as shift
WARNING: shift/reduce conflict for EQ in state 94 resolved as shift
WARNING: shift/reduce conflict for MAJ_EQ in state 94 resolved as shift
WARNING: shift/reduce conflict for MIN_EQ in state 94 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 94 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 94 resolved as shift
WARNING: shift/reduce conflict for STAR in state 94 resolved as shift
WARNING: shift/reduce conflict for DIV in state 94 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 94 resolved as shift
WARNING: reduce/reduce conflict in state 20 resolved using rule (empty -> <empty>)
WARNING: rejected rule (id -> ID) in state 20
WARNING: Rule (id -> ID) is never reduced
